#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\begin_layout Enumerate

\series bold
[YIJC/PRELIM/9597/2019/P1/Q1] 
\end_layout

\begin_deeper
\begin_layout Standard
According to some researches done on children below the age of 16, it was
 found that the height of a boy, measured in centimetres (cm), should lie
 within the normal range with: 
\end_layout

\begin_layout Standard
\noindent
\align center
minimum height = 5.3 × Age + 71 
\end_layout

\begin_layout Standard
\noindent
\align center
maximum height = 6.2 × Age + 87 
\end_layout

\begin_layout Standard
The text file HEIGHTDATA.TXT contains 20 entries of the data in the following
 format: 
\end_layout

\begin_layout Standard
\noindent
\align center
<Name>, <Age>, <Height> 
\end_layout

\begin_layout Subsection*
Task 1.1: 
\end_layout

\begin_layout Standard
Write program code to:
\end_layout

\begin_layout Itemize
read the entire contents of 
\family typewriter
HEIGHTDATA.TXT
\family default
.
 
\end_layout

\begin_layout Itemize
determine if the boy’s height lies within the normal range.
 
\end_layout

\begin_layout Itemize
display the contents using the format given below 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
Example run of the program: 
\end_layout

\begin_layout Plain Layout

\series bold
Input File: 
\end_layout

\begin_layout Plain Layout

\family typewriter
Ali,6,105 
\end_layout

\begin_layout Plain Layout

\family typewriter
Bob,10,145 
\end_layout

\begin_layout Plain Layout

\family typewriter
Charlie,15,185
\family default
 
\end_layout

\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The output generated from the input file would be: 
\end_layout

\begin_layout Plain Layout

\family typewriter
\series bold
Name 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Age Height Within normal range 
\end_layout

\begin_layout Plain Layout

\family typewriter
Ali 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

6 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

105 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Yes
\end_layout

\begin_layout Plain Layout

\family typewriter
Bob 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

10 
\begin_inset space ~
\end_inset

145 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Yes 
\end_layout

\begin_layout Plain Layout

\family typewriter
Charlie 15 
\begin_inset space ~
\end_inset

185 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

No
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Evidence 1.1: 
\end_layout

\begin_layout Standard
Your program code.
 
\begin_inset space \hfill{}
\end_inset

[6]
\end_layout

\begin_layout Subsection*
Evidence 1.2: 
\end_layout

\begin_layout Standard
Screenshot of the output.
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\begin_layout Standard
During data entry, some of the data may have been wrongly entered with transposi
tion errors.
 In the case of Charlie’s, his height should have been 158 cm but was wrongly
 transposed and entered as 185 cm.
 
\end_layout

\begin_layout Subsection*
Task 1.2: 
\end_layout

\begin_layout Standard
Write program code to: 
\end_layout

\begin_layout Itemize
determine the correct height for those entries outside the normal range.
 
\end_layout

\begin_layout Itemize
display the amended contents using the format given below.
 
\end_layout

\begin_layout Standard
In cases where there are more than one possible or no possible height, print
 ‘Re-enter data’.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
Example run of the program:
\end_layout

\begin_layout Plain Layout

\series bold
Input File:
\end_layout

\begin_layout Plain Layout

\family typewriter
Ali,6,105
\end_layout

\begin_layout Plain Layout

\family typewriter
Bob,10,145 
\end_layout

\begin_layout Plain Layout

\family typewriter
Charlie,15,185 
\end_layout

\begin_layout Plain Layout

\family typewriter
Ethan,7,131 
\end_layout

\begin_layout Plain Layout

\family typewriter
Rick,13,415 
\end_layout

\end_inset


\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
The output generated from the input file would be:
\end_layout

\begin_layout Plain Layout

\family typewriter
\series bold
Name 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Age Height Corrected Height
\end_layout

\begin_layout Plain Layout

\family typewriter
Charlie 15 
\begin_inset space ~
\end_inset

185 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

158
\end_layout

\begin_layout Plain Layout

\family typewriter
Ethan 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

7 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

131 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

113 
\end_layout

\begin_layout Plain Layout

\family typewriter
Rick 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

13 
\begin_inset space ~
\end_inset

415 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

Re-enter data
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Example run of the program: 
\end_layout

\begin_layout Subsection*
Evidence 1.3: 
\end_layout

\begin_layout Standard
Your program code.
 
\begin_inset space \hfill{}
\end_inset

[6]
\end_layout

\begin_layout Subsection*
Evidence 1.4: 
\end_layout

\begin_layout Standard
Screenshot of the output.
 
\begin_inset space \hfill{}
\end_inset

[1]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[YIJC/PRELIM/9597/2019/P1/Q2] 
\end_layout

\begin_deeper
\begin_layout Standard
The Oxford English Dictionary, published in 1989, contains 171,476 words.
 Instead of doing a linear search whenever we want to find a word, it is
 more efficient to perform a binary search.
 
\end_layout

\begin_layout Subsection*
Evidence 2.1: 
\end_layout

\begin_layout Standard
Describe the binary search algorithm.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Subsection*
Task 2.1: 
\end_layout

\begin_layout Standard
Write a program 
\family typewriter
BinarySearch(lst, item)
\family default
 to search for an item in the list 
\family typewriter
lst
\family default
 using the binary search algorithm.
 
\end_layout

\begin_layout Standard
The program will:
\end_layout

\begin_layout Itemize
import the sorted list of words, given in the file 
\family typewriter
1000WORDS.TXT
\family default
, into a simple array 
\family typewriter
dataset
\family default
.
 
\end_layout

\begin_layout Itemize
report whether or not the item is found in the list.
 If found, output the index position and the list of words examined by the
 program during the binary search.
 
\end_layout

\begin_layout Subsection*
Evidence 2.2:
\end_layout

\begin_layout Standard
Your program code and the screenshot for the following searches: 
\end_layout

\begin_layout Itemize

\family typewriter
BinarySearch(dataset, "WORD") 
\end_layout

\begin_layout Itemize

\family typewriter
BinarySearch(dataset, "WORDA") 
\end_layout

\begin_layout Itemize

\family typewriter
BinarySearch(dataset, "TRADE")
\family default
 
\begin_inset space \hfill{}
\end_inset

[8]
\end_layout

\begin_layout Standard
If we want to find all the words that start with “TR”, we can perform a
 partial word search on the given dataset.
 The search will return a word list as follows: 
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
['TRACK', 'TRADE', 'TRAIN', 'TRAVEL', 'TREE', 'TRIANGLE', 'TRIP', 'TROUBLE',
 'TRUCK', 'TRUE', 'TRY']
\end_layout

\begin_layout Standard
Using the program written in Task 2.1 to perform a binary search for the
 word “
\family typewriter
TR
\family default
”; the first word starting with “
\family typewriter
TR
\family default
” should be “
\family typewriter
TRADE
\family default
” found at index 
\family typewriter
889
\family default
.
 We can now perform a linear search near index 
\family typewriter
889
\family default
 for all the words starting with “
\family typewriter
TR
\family default
”.
 
\end_layout

\begin_layout Subsection*
Task 2.2: 
\end_layout

\begin_layout Standard
Modify the code 
\family typewriter
BinarySearch(lst, item)
\family default
 written in Task 2.1.
 
\end_layout

\begin_layout Standard
Your program will: 
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
1.
\end_layout

\end_inset

 perform a partial search for the word in the list 
\family typewriter
lst
\family default
 starting with the given letter(s), item 
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
2.
\end_layout

\end_inset

 perform a linear search near the index found in step (1) to return a list
 of words starting with the given letter(s) 
\end_layout

\begin_layout Subsection*
Evidence 2.3: 
\end_layout

\begin_layout Standard
Your program code and the screenshot for the following searches: 
\end_layout

\begin_layout Itemize

\family typewriter
BinarySearch(dataset, "TR")
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
BinarySearch(dataset, "RE")
\family default

\begin_inset space \hfill{}
\end_inset

 [5]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[YIJC/PRELIM/9597/2019/P1/Q3] 
\end_layout

\begin_deeper
\begin_layout Standard
An 
\family typewriter
ExpressionTree
\family default
 data structure is required to store 20 nodes.
 A linked list is maintained of all the nodes.
 A node contains a data value and two pointers: a left pointer and a right
 pointer.
 Items in the list are initially linked using their 
\family typewriter
LeftChild
\family default
 pointers.
 
\end_layout

\begin_layout Standard
Each node is implemented as an instance of the class 
\family typewriter
Node
\family default
.
 
\end_layout

\begin_layout Standard
The class 
\family typewriter
Node
\family default
 has the following properties: Class: Node Attributes Identifier Data Type
 Description DataValue STRING The node data LeftChild INTEGER The left node
 pointer RightChild INTEGER The right node pointer 
\end_layout

\begin_layout Standard
The 
\family typewriter
ExpressionTree
\family default
 class is implemented as follows: Class: ExpressionTree Attributes Identifier
 Data Type Description Tree ARRAY[1:20] OF Node The tree data, initialised
 as a linked list Fringe ARRAY: INTEGER A list to store the index of nodes
 traversed Root INTEGER Index for the root position of the Tree array NextFreeCh
ild INTEGER Index for the next unused node 
\end_layout

\begin_layout Standard
The index of the first available node is indicated by 
\family typewriter
NextFreeChild
\family default
.
 The initial value of 
\family typewriter
Root
\family default
 is 0 and the initial value of 
\family typewriter
NextFreeChild
\family default
 is 0.
 The 
\family typewriter
Fringe
\family default
 is initialised as an empty list and it will be used for node insertion
 to store the index for the nodes traversed.
 
\end_layout

\begin_layout Standard
The diagram shows the 
\family typewriter
Tree
\family default
 array with the linked list to record the unused nodes.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename C:/Users/Admin/Desktop/Github/question_bank/LyX/static/img/9597-YIJC-2019-P1-Q3-1.png
	width 15page%

\end_inset


\end_layout

\begin_layout Subsection*
Task 3.1 
\end_layout

\begin_layout Standard
Write a program code to define the 
\family typewriter
Node
\family default
 and 
\family typewriter
ExpressionTree
\family default
 classes.
\end_layout

\begin_layout Subsection*
Evidence 3.1
\end_layout

\begin_layout Standard
Your program code for Task 3.1.
 
\begin_inset space \hfill{}
\end_inset

[12]
\end_layout

\begin_layout Standard
The task is to store the tokens of a binary arithmetic expression in the
 data structure instantiated from the 
\family typewriter
ExpressionTree
\family default
 class.
 
\end_layout

\begin_layout Standard
An arithmetic expression is a sequence of tokens that follows prescribed
 rules.
 A token may be either an operand or an operator.
 
\end_layout

\begin_layout Standard
A binary arithmetic operation using the standard arithmetic operators, 
\family typewriter
+ - * /
\family default
 , may be in the form of operand-operator-operand.
 For example, 
\end_layout

\begin_layout Standard
\noindent
\align center

\family typewriter
2 + 3 
\end_layout

\begin_layout Standard
where 
\family typewriter
2
\family default
 and 
\family typewriter
3
\family default
 are operands, 
\family typewriter
+
\family default
 is an operator.
 This expression will evaluate to a value of 
\family typewriter
5
\family default
.
 
\end_layout

\begin_layout Subsection*
Task 3.2 
\end_layout

\begin_layout Standard
Write a function 
\family typewriter
IsOperator(s)
\family default
 that takes in a string 
\family typewriter
s
\family default
, and returns 
\family typewriter
True
\family default
 if it is a standard arithmetic operator and returns 
\family typewriter
False
\family default
 if otherwise.
 
\end_layout

\begin_layout Subsection*
Evidence 3.2 
\end_layout

\begin_layout Standard
Your program code for Task 3.2.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Standard
An expression tree is a binary tree with the following properties: 
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
1.
\end_layout

\end_inset

 Each leaf is an 
\emph on
operand
\emph default
.
 
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
2.
\end_layout

\end_inset

 The root and internal nodes are 
\emph on
operators
\emph default
.
 
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
3.
\end_layout

\end_inset

 Subtrees are sub-expressions, with the root being an 
\emph on
operator
\emph default
.
\end_layout

\begin_layout Standard
The following shows a series of commands to create and insert values into
 the data structure to create an expression tree.
 
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
CreateNewExpTree 
\end_layout

\begin_layout Plain Layout

\family typewriter
InsertToExpTree("+") 
\end_layout

\begin_layout Plain Layout

\family typewriter
InsertToExpTree("*") 
\end_layout

\begin_layout Plain Layout

\family typewriter
InsertToExpTree("4") 
\end_layout

\begin_layout Plain Layout

\family typewriter
InsertToExpTree("2") 
\end_layout

\begin_layout Plain Layout

\family typewriter
InsertToExpTree("/") 
\end_layout

\begin_layout Plain Layout

\family typewriter
InsertToExpTree("3")
\end_layout

\begin_layout Plain Layout

\family typewriter
InsertToExpTree("1")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The figure below shows the expression tree obtained and its 
\series bold
infix
\series default
 expression obtained by an in-order traversal.
 
\end_layout

\begin_layout Standard
This expression will evaluate to 
\family typewriter
10
\family default
.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename C:/Users/Admin/Desktop/Github/question_bank/LyX/static/img/9597-YIJC-2019-P1-Q3-2.png
	width 15page%

\end_inset


\end_layout

\begin_layout Standard
The following pseudocode (available in 
\family typewriter
PSEUDOCODE_TASK_3_3.TXT
\family default
) can be used to add a node to the expression tree.
 
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "88col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
PROCEDURE Insert(NewToken)
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

IF NextFreeChild = -1 THEN // check if tree is full 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

RETURN 'Tree is Full'
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

// tree is not full, safe to insert new token 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

IF NextFreeChild = 0 THEN // inserting into empty Tree 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Tree[Root].DataValue NewToken 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

NextFreeChild 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Tree[Root].LeftChild Tree[Root].LeftChild -1
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

ELSE 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// inserting into tree with existing 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// starting with Root 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Current 0 // index of the current node 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Previous -1 // index of previous node 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

NewNode Tree[NextFreeChild] // declare new node 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

NewNode.DataValue NewToken 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// Finding the node at which the NewNode can be inserted 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

WHILE Current <> -1 THEN 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

CurrNode Tree[Current] 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

IF IsOperator(CurrNode.DataValue) THEN 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// check if CurrNode contains an operator 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

IF CurrNode.LeftChild = -1 THEN 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// if LeftChild is empty, insert here 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

CurrNode.LeftChild NextFreeChild 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

NextFreeChild NewNode.LeftChild 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

NewNode.LeftChild -1 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Current -1
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ELIF CurrNode.RightChild = -1 THEN
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// if RightChild is empty, insert here 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

CurrNode.RightChild 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

NextFreeChild NextFreeChild ← NewNode.LeftChild 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

NewNode.LeftChild -1
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Current -1 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ELIF IsOperator(Tree[CurrNode.LeftChild].DataValue) THEN 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// if LeftChild is an operator, 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// traverse leftchild subtree 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Previous Current 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Current CurrNode.LeftChild
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Fringe.APPEND(Previous)
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ELIF IsOperator(Tree[CurrNode.RightChild].DataValue)THEN 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// if RightChild is an operator, 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// traverse rightchild subtree 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Previous Current
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Current CurrNode.RightChild 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Fringe.APPEND(Previous) 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ELSE // traverse right subtree 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Previous Fringe.POP(-1) 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Current Tree[Previous].RightChild
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ENDIF 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ELSE // no place to insert
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

RETURN "Cannot be inserted" 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ENDIF 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ENDWHILE
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

ENDIF
\end_layout

\begin_layout Plain Layout

\family typewriter
ENDPROCEDURE
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Task 3.3 
\end_layout

\begin_layout Standard
Write a code to implement the 
\family typewriter
Insert
\family default
 method for the 
\family typewriter
ExpressionTree
\family default
 class from this pseudocode.
\end_layout

\begin_layout Standard
You may use the text file 
\family typewriter
PSEUDOCODE_TASK_3_3.TXT
\family default
 as a basis for writing your code.
\end_layout

\begin_layout Subsection*
Evidence 3.3 
\end_layout

\begin_layout Standard
Your program code for Task 3.3.
 
\begin_inset space \hfill{}
\end_inset

[7]
\end_layout

\begin_layout Subsection*
Task 3.4: 
\end_layout

\begin_layout Standard
Write a code for the 
\family typewriter
Display
\family default
 method for the 
\family typewriter
ExpressionTree
\family default
 class which displays the contents of 
\family typewriter
Tree
\family default
 in index order.
 
\end_layout

\begin_layout Subsection*
Evidence 3.4 
\end_layout

\begin_layout Standard
Your program code for Task 3.4.
 
\begin_inset space \hfill{}
\end_inset

 [4]
\end_layout

\begin_layout Subsection*
Task 3.5 
\end_layout

\begin_layout Standard
Write a sequence of program statements to: 
\end_layout

\begin_layout Itemize
create an expression tree
\end_layout

\begin_layout Itemize
add the data items based on the sequence of commands given 
\end_layout

\begin_layout Itemize
display the array contents 
\end_layout

\begin_layout Subsection*
Evidence 3.5 
\end_layout

\begin_layout Standard
Your program code for Task 3.5.
 
\begin_inset space \hfill{}
\end_inset

[3]
\end_layout

\begin_layout Subsection*
Evidence 3.6 
\end_layout

\begin_layout Standard
Screenshot showing the output from running the program in Task 3.5.
 
\begin_inset space \hfill{}
\end_inset

[1]
\end_layout

\begin_layout Subsection*
Task 3.6 
\end_layout

\begin_layout Standard
The infix notation can be obtained by performing an in-order traversal in
 the expression tree.
 
\end_layout

\begin_layout Standard
Write a code for the 
\family typewriter
infix
\family default
 method for the 
\family typewriter
ExpressionTree
\family default
 class to generate the infix notation for a complete expression tree.
 
\end_layout

\begin_layout Subsection*
Evidence 3.7 
\end_layout

\begin_layout Standard
Your program code for Task 3.6.
 
\begin_inset space \hfill{}
\end_inset

 [6]
\end_layout

\begin_layout Subsection*
Evidence 3.8 
\end_layout

\begin_layout Standard
Screenshot showing the output from running the program in Task 3.6.
 
\begin_inset space \hfill{}
\end_inset

 [1]
\end_layout

\begin_layout Subsection*
Task 3.7 
\end_layout

\begin_layout Standard
Write a code for the 
\family typewriter
calculate
\family default
 method to evaluate and return the numerical answer for the expression,
 rounded off to 2 decimal places.
 
\end_layout

\begin_layout Subsection*
Evidence 3.9 
\end_layout

\begin_layout Standard
Your program code for Task 3.7.
 
\begin_inset space \hfill{}
\end_inset

[3]
\end_layout

\begin_layout Subsection*
Evidence 3.10 
\end_layout

\begin_layout Standard
Screenshot showing the output from running the program in Task 3.7.
 
\begin_inset space \hfill{}
\end_inset

[1]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[YIJC/PRELIM/9597/2019/P1/Q4] 
\end_layout

\begin_deeper
\begin_layout Standard
Minesweeper is a type of single-player puzzle game in which the player continuou
sly selects a cell in a square grid.
 Each cell contains either a bomb or a value showing the number of bombs
 in the neighbouring cell.
 (Neighbouring cells are those adjacent horizontally, vertically or diagonally.)
\end_layout

\begin_layout Standard
If the player selects a cell that is a bomb, it ‘explodes’ and he loses
 the game.
 The number of cells the player has selected without exploding a bomb will
 be the player’s score.
\end_layout

\begin_layout Standard
You are required to write a program code to generate a minesweeper grid,
 randomly position the bombs and populate all the other cells with the values
 indicating the number of bombs in the neighbouring cells.
 Without revealing the minesweeper grid to the player, the program should
 prompt the player to select the cells one by one.
 His score will be the number of cells opened before hitting a bomb.
 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "25col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
X 2 1 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
1 3 X 2 
\end_layout

\begin_layout Plain Layout

\family typewriter
0 2 X 3 
\end_layout

\begin_layout Plain Layout

\family typewriter
0 1 2 X 
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Task 4.1: 
\end_layout

\begin_layout Standard
Write a program code to generate and display an empty square grid of size
 
\begin_inset Formula $n$
\end_inset

, ie 
\begin_inset Formula $n$
\end_inset

 rows by 
\begin_inset Formula $n$
\end_inset

 columns.
 The minesweeper grid for 
\begin_inset Formula $n=5$
\end_inset

 is as shown below: 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "25col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
0 0 0 0 0 
\end_layout

\begin_layout Plain Layout

\family typewriter
0 0 0 0 0 
\end_layout

\begin_layout Plain Layout

\family typewriter
0 0 0 0 0 
\end_layout

\begin_layout Plain Layout

\family typewriter
0 0 0 0 0
\end_layout

\begin_layout Plain Layout

\family typewriter
0 0 0 0 0 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Your code should use a suitable data structure and fixed loop(s) to display
 the grid.
\end_layout

\begin_layout Subsection*
Evidence 4.1: 
\end_layout

\begin_layout Standard
Your program code and screenshot of an empty grid of size 5.
\begin_inset space \hfill{}
\end_inset

 [3]
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection*
Task 4.2: 
\end_layout

\begin_layout Standard
Write a program code to randomly place a bomb, represented by "X", within
 the grid.
 Populate all the neighbouring cells by increasing their values to 1 to
 indicate the presence of this one bomb in the neighbourhood.
 
\end_layout

\begin_layout Subsection*
Evidence 4.2: 
\end_layout

\begin_layout Standard
Your program code and two different screenshots of the grid (
\begin_inset Formula $n=5$
\end_inset

).
 
\begin_inset space \hfill{}
\end_inset

[5]
\end_layout

\begin_layout Subsection*
Task 4.3: 
\end_layout

\begin_layout Standard
Modify the code written in Task 4.2 to randomly place two bombs within the
 grid.
 Populate all the neighbouring cells with the correct values to indicate
 the presence of the bombs in the neighbourhood.
 
\end_layout

\begin_layout Subsection*
Evidence 4.3: 
\end_layout

\begin_layout Standard
Your program code and the screenshot of the grid (
\begin_inset Formula $n=5$
\end_inset

) with 2 bombs.
\begin_inset space \hfill{}
\end_inset

 [4]
\end_layout

\begin_layout Subsection*
Task 4.4: 
\end_layout

\begin_layout Standard
Modify the code written in Task 4.3 to generate 
\begin_inset Formula $k$
\end_inset

 numbers of bombs within a grid of size 
\begin_inset Formula $n$
\end_inset

 and correctly display all the values in the neighbouring cells surrounding
 the bombs.
 
\end_layout

\begin_layout Subsection*
Evidence 4.4: 
\end_layout

\begin_layout Standard
Your program code and the screenshots of the minesweeper grids for the following
 levels of difficulty.
 
\end_layout

\begin_layout Itemize
Beginner (grid size 
\begin_inset Formula $n=5$
\end_inset

; no.
 of bombs 
\begin_inset Formula $k=3$
\end_inset

)
\end_layout

\begin_layout Itemize
Intermediate (grid size 
\begin_inset Formula $n=6$
\end_inset

; no.
 of bombs 
\begin_inset Formula $k=8$
\end_inset

)
\end_layout

\begin_layout Itemize
Expert (grid size 
\begin_inset Formula $n=8$
\end_inset

; no.
 of bombs 
\begin_inset Formula $k=20$
\end_inset

) [8]
\end_layout

\begin_layout Subsection*
Task 4.5: 
\end_layout

\begin_layout Standard
Write a program code to play the minesweeper game.
 Your code will:
\end_layout

\begin_layout Itemize
prompt the player to select the level of difficulty
\end_layout

\begin_layout Itemize
generate the Minesweeper grid 
\end_layout

\begin_layout Itemize
display a “blank” grid with ‘-’ for each of the cell prompt the player to
 input the coordinates of a cell he wishes to open 
\end_layout

\begin_deeper
\begin_layout Itemize
If the opened cell is a bomb (“X”), declare “Game Over!”, show the grid
 and display the player’s score.
\end_layout

\begin_layout Itemize
If the opened cell is not a bomb, show the updated grid with the opened
 cell, increase the player’s score by 1 and continue with the game.
\end_layout

\end_deeper
\begin_layout Itemize
declare “You have Won!” when the player has opened all the possible cells
 and display the player’s score.
 
\end_layout

\begin_deeper
\begin_layout Standard
[Sample screenshot of a typical game]: 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
Enter your cell you want to open:
\end_layout

\begin_layout Plain Layout

\family typewriter
X (1 to 5) : 2
\end_layout

\begin_layout Plain Layout

\family typewriter
Y (1 to 5) : 3
\end_layout

\begin_layout Plain Layout

\family typewriter
_ _ _ _ _
\end_layout

\begin_layout Plain Layout

\family typewriter
_ _ 1 _ _
\end_layout

\begin_layout Plain Layout

\family typewriter
0 _ _ _ _
\end_layout

\begin_layout Plain Layout

\family typewriter
_ _ 1 _ _
\end_layout

\begin_layout Plain Layout

\family typewriter
_ _ _ _ _
\end_layout

\begin_layout Plain Layout

\family typewriter
Your score is : 3
\end_layout

\end_inset


\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "50col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
Enter your cell you want to open:
\end_layout

\begin_layout Plain Layout

\family typewriter
X (1 to 5) : 2
\end_layout

\begin_layout Plain Layout

\family typewriter
Y (1 to 5) : 4
\end_layout

\begin_layout Plain Layout

\family typewriter
X 1 1 1 1
\end_layout

\begin_layout Plain Layout

\family typewriter
1 1 1 X 1
\end_layout

\begin_layout Plain Layout

\family typewriter
0 0 1 1 1
\end_layout

\begin_layout Plain Layout

\family typewriter
0 1 1 1 0
\end_layout

\begin_layout Plain Layout

\family typewriter
0 1 X 1 0
\end_layout

\begin_layout Plain Layout

\family typewriter
Game over! You've hit the bomb at : (2,4).
\end_layout

\begin_layout Plain Layout

\family typewriter
Your score is : 3
\end_layout

\begin_layout Plain Layout

\family typewriter
Do you want to try again?
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection*
Evidence 4.5:
\end_layout

\begin_layout Standard
Your program code and a screenshot of a game.
 
\begin_inset space \hfill{}
\end_inset

[10]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\end_body
\end_document
