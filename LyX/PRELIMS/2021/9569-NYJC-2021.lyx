#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\begin_layout Enumerate

\series bold
[NYJC/PRELIM/9569/2021/P1/Q1] 
\end_layout

\begin_deeper
\begin_layout Enumerate
The TCP/IP networking model comprises 4 layers.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Copy and complete the below diagram for the TCP/IP stack.
\end_layout

\begin_deeper
\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Transport Layer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset

[3]
\end_layout

\end_deeper
\begin_layout Enumerate
State the purpose of the Transport Layer in the TCP/IP network model.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Enumerate
State the reserved port range used in the Transport Layer.
 
\begin_inset space \hfill{}
\end_inset

[1]
\end_layout

\end_deeper
\begin_layout Enumerate
A certain port number in binary form is 
\family typewriter
00000100
\family default
 
\family typewriter
00011000
\family default
.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Express this value in denary (decimal) form.
 
\begin_inset space \hfill{}
\end_inset

[3]
\end_layout

\begin_layout Enumerate
Explain how it may be checked if this binary port value is within the reserved
 port range, without converting it to decimal.
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
State which layer of the TCP/IP model the Domain Name System (DNS) protocol
 belongs to.
\begin_inset space \hfill{}
\end_inset

 [1]
\end_layout

\begin_layout Enumerate
Describe the purpose of the DNS protocol.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\end_deeper
\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[NYJC/PRELIM/9569/2021/P1/Q2] 
\end_layout

\begin_deeper
\begin_layout Enumerate
Validation and verification are used in data entry.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
State the purpose of validation.
 
\begin_inset space \hfill{}
\end_inset

[1]
\end_layout

\begin_layout Enumerate
State the purpose of verification.
 
\begin_inset space \hfill{}
\end_inset

[1]
\end_layout

\end_deeper
\begin_layout Standard
A network program using TCP needs to check if a port number is within an
 acceptable range of values.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

 Is this fulfilled by validation or verification? Explain your answer.
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(c)
\end_layout

\end_inset

 Provide three sets of suitable test values for the above check.
 
\begin_inset space \hfill{}
\end_inset

[3]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[NYJC/PRELIM/9569/2021/P1/Q3] 
\end_layout

\begin_deeper
\begin_layout Standard
A printing shop needs to set up a print queue system to serve its customers.
 This print queue will manage print tasks, by sending them one at a time
 to available printers.
\end_layout

\begin_layout Standard
For all print tasks, the data that will be stored include: 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\family default
User 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\family default
Printer address 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\family default
Job name 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\family default
Status 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The print queue itself stores the following data: 
\end_layout

\begin_layout Standard

\family typewriter
\begin_inset space \qquad{}
\end_inset


\family default
Number of jobs 
\end_layout

\begin_layout Standard
When a print task is added to the queue: 
\end_layout

\begin_layout Itemize
The task is stored inside the queue, in FIFO order 
\end_layout

\begin_layout Itemize
The jobs count is incremented by one 
\end_layout

\begin_layout Standard
When a print task is sent to a printer: 
\end_layout

\begin_layout Itemize
The print task is removed from the queue, in FIFO order 
\end_layout

\begin_layout Itemize
The jobs count is decremented by one
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Draw a class diagram that shows the following for the situation described
 above.
 
\end_layout

\begin_deeper
\begin_layout Itemize
The classes 
\end_layout

\begin_layout Itemize
properties 
\end_layout

\begin_layout Itemize
appropriate methods 
\begin_inset space \hfill{}
\end_inset

[9]
\end_layout

\end_deeper
\begin_layout Enumerate
Explain the meaning of the terms: 
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
1.
\end_layout

\end_inset

 inheritance 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
2.
\end_layout

\end_inset

 polymorphism 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
The printing shop wishes to implement a circular queue to limit the maximum
 number of pending jobs and improve the performance of their system.
 
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
State two differences between a linear queue and a circular queue.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Enumerate
Suggest whether inheritance or polymorphism is a more suitable principle
 to apply in the implementation of both linear queue and circular queue
 in the same program.
 Explain your answer.
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(c)
\end_layout

\end_inset

 Using a suitable diagram, pseudocode, or other method, show how an item
 would be added to a circular queue implemented with a static array.
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[NYJC/PRELIM/9569/2021/P1/Q4] 
\end_layout

\begin_deeper
\begin_layout Standard
An algorithm for sorting an array of elements is shown.
 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
01 FOR i = 1 to Array.LENGTH - 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
02 
\begin_inset space \qquad{}
\end_inset

FOR j = 1 to Array.LENGTH - 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
03 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

IF Array[j] > Array[j+1] 
\end_layout

\begin_layout Plain Layout

\family typewriter
04 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

THEN 
\end_layout

\begin_layout Plain Layout

\family typewriter
05 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

t = Array[j] 
\end_layout

\begin_layout Plain Layout

\family typewriter
06 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Array[j] = Array[j+1] 
\end_layout

\begin_layout Plain Layout

\family typewriter
07 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Array[j+1] = t 
\end_layout

\begin_layout Plain Layout

\family typewriter
08 
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ENDIF 
\end_layout

\begin_layout Plain Layout

\family typewriter
09 
\begin_inset space \qquad{}
\end_inset

ENDFOR 
\end_layout

\begin_layout Plain Layout

\family typewriter
10 ENDFOR 
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Enumerate
State the algorithm represented.
 
\begin_inset space \hfill{}
\end_inset

[1]
\end_layout

\begin_layout Enumerate
tate the time complexity of this algorithm.
 
\begin_inset space \hfill{}
\end_inset

[1]
\end_layout

\begin_layout Enumerate
Copy and complete the trace table below with the value of 
\family typewriter
Array
\family default
 at the end of each iteration of 
\family typewriter
i
\family default
 in the algorithm.
 
\begin_inset space \hfill{}
\end_inset

[5]
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
i
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Array
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Initial 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[2, 3, 4, 5, 6, 1]
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Describe 
\series bold
two
\series default
 improvements that could be made to the above algorithm to improve its efficienc
y.
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Enumerate
Explain why insertion sort is usually used instead of bubble sort, although
 both have the same time efficiency.
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[NYJC/PRELIM/9569/2021/P1/Q5] 
\end_layout

\begin_deeper
\begin_layout Standard
A school database has some data in the following table: 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
StudentID
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Student Name 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Class 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Subjects
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Wong Yong Ming 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1917 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
H2MATH, H2PHY, H2CHEM, H2ECON
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Vikram Singh 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1911 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
H2MATH, H2CHEM, H2ECON,H1GEOG
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Muhd Bashir bin Ramdan 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1911
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
H2MATH, H2CHEM, H2ECON, H1ELIT
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset

 
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
State and explain if the above table is in third normal form (3NF).
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Enumerate
Describe two advantages that normalised data has over redundant data.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\end_deeper
\begin_layout Standard
In an effort to improve the school database, the IT administrator came up
 with an ER diagram.
 Part of the full ER diagram is as shown.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename C:/Users/Admin/Desktop/Github/question_bank/LyX/static/img/9569-NYJC-2021-P1-Q5.png
	width 15page%

\end_inset


\end_layout

\begin_layout Standard
Each of the three entities in the ER diagram has a name attribute.
 
\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

 
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Enumerate
Write table descriptions to implement the above ER diagram.
 
\begin_inset space \hfill{}
\end_inset

[5]
\end_layout

\begin_layout Enumerate
Write an SQL query to retrieve only the student name and class name for
 all students in the level 
\family typewriter
JC2
\family default
.
 
\begin_inset space \hfill{}
\end_inset

[3]
\end_layout

\end_deeper
\begin_layout Standard
A fast-growing startup is writing code to provide a new service.
 The user needs have not yet been fully determined, and the data schema
 is likely to undergo further changes before being finalised.
 
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(c)
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Suggest if SQL or NoSQL is more suitable for the needs of this startup.
 Give 
\series bold
two
\series default
 reasons to support your answer.
\begin_inset space \hfill{}
\end_inset

 [4]
\end_layout

\begin_layout Enumerate
Describe 
\series bold
two
\series default
 challenges the startup will face in using NoSQL databases.
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(d)
\end_layout

\end_inset

 The startup is concerned that a hardware failure may wipe out critical
 data and leave them unable to continue operating.
 
\end_layout

\begin_deeper
\begin_layout Standard
Suggest what the startup should do to 
\series bold
ensure
\series default
 that they are safe against data loss in such a scenario.
\begin_inset space \hfill{}
\end_inset

 [4]
\end_layout

\end_deeper
\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[NYJC/PRELIM/9569/2021/P1/Q6] 
\end_layout

\begin_deeper
\begin_layout Standard
Alice, a programmer, is implementing a DNS cache using a hash table.
 
\end_layout

\begin_layout Enumerate
Explain the purpose of the hash function in a hash table.
 
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\begin_layout Standard
The description for a particular hashing algorithm using rolling polynomials
 is as follows: 
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
For each character in the data, do the following: 
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
1
\end_layout

\end_inset

 Let 
\family typewriter
i
\family default
 represent the position of the character (1st char = 1, 2nd char = 2, ...)
 
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
2
\end_layout

\end_inset

 Let 
\family typewriter
ascii
\family default
 represent the ASCII value of the character 
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
3
\end_layout

\end_inset

 Calculate the sum of 
\family typewriter
i
\family default
×(31^
\family typewriter
ascii
\family default
) for all characters 
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(b)
\end_layout

\end_inset

 Implement this algorithm in pseudocode.
 
\end_layout

\begin_deeper
\begin_layout Standard
You may assume that the function 
\family typewriter
Ord()
\family default
 is available, which takes in a single character and returns the ASCII value
 of the character.
 
\begin_inset space \hfill{}
\end_inset

 [4]
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(c)
\end_layout

\end_inset

 Bob, another programmer, suggests that a Binary Search Tree would be a
 more appropriate data structure for the DNS cache.
 
\end_layout

\begin_deeper
\begin_layout Enumerate
Describe one advantage of using a hash table for the DNS cache.
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\begin_layout Enumerate
Describe one advantage of using a Binary Search Tree for the DNS cache.
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(d)
\end_layout

\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
State the algorithm used to retrieve the sorted contents of a cache from
 a Binary Search Tree.
\begin_inset space \hfill{}
\end_inset

 [1]
\end_layout

\begin_layout Enumerate
Using any appropriate diagrams, pseudocode, or other appropriate method,
 show how this algorithm might be carried out.
 
\begin_inset space \hfill{}
\end_inset

 [5]
\end_layout

\begin_layout Enumerate
Explain why the Binary Search Tree might need to be periodically recreated.
\begin_inset space \hfill{}
\end_inset

 [3]
\end_layout

\end_deeper
\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[NYJC/PRELIM/9569/2021/P2/Q1] 
\end_layout

\begin_deeper
\begin_layout Standard
Name your Jupyter Notebook as 
\end_layout

\begin_layout Standard

\family typewriter
TASK1_<your name>_<centre number>_<index number>.ipynb 
\end_layout

\begin_layout Standard
A text file, 
\family typewriter
TIDES.TXT
\family default
, contains the low and high tide information for a coastal location for
 each day of a month.
 Each line contains tab-delimited data that shows the date, the time, whether
 the tide is high or low and the tide height in metres.
 
\end_layout

\begin_layout Standard
Each line is in the format: 
\end_layout

\begin_layout Standard

\family typewriter
YYYY-MM-DD
\backslash
tHH:mm
\backslash
tTIDE
\backslash
tHEIGHT
\backslash
n 
\end_layout

\begin_layout Itemize
The date is in the form YYYY-MM-DD, for example, 2019-08-03 is 3rd August,
 2019 
\end_layout

\begin_layout Itemize
The time is in the form HH:mm, for example, 13:47 
\end_layout

\begin_layout Itemize
TIDE is either HIGH or LOW 
\end_layout

\begin_layout Itemize
HEIGHT is a positive number shown to one decimal place 
\end_layout

\begin_layout Itemize

\family typewriter

\backslash
t
\family default
 represents the tab character 
\end_layout

\begin_layout Itemize

\family typewriter

\backslash
n
\family default
 represents the newline character 
\end_layout

\begin_layout Standard
The text file is stored in ascending order of date and time.
 
\end_layout

\begin_layout Standard
For each of the sub-tasks, add a comment statement, at the beginning of
 the code using the hash symbol ‘#’, to indicate the sub-task the program
 code belongs to, for example: 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell multirow="3" alignment="center" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
In[1]:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
# Task 1.1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Program Code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Output:
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Task 1.1 
\end_layout

\begin_layout Standard
Write program code to: 
\end_layout

\begin_layout Itemize
read the tide data from a text file 
\end_layout

\begin_layout Itemize
find the highest high tide and print this value 
\end_layout

\begin_layout Itemize
find the lowest low tide and print this value 
\end_layout

\begin_layout Standard
Use 
\family typewriter
TIDES.TXT
\family default
 to test your program code.
\begin_inset space \hfill{}
\end_inset

 [7]
\end_layout

\begin_layout Standard
Save your Jupyter Notebook for Task 1.
 
\end_layout

\begin_layout Subsubsection*
Task 1.2 
\end_layout

\begin_layout Standard
The tidal range is the difference between the heights of successive tides;
 from a high tide to the following low tide or from a low tide to the following
 high tide.
 
\end_layout

\begin_layout Standard
Amend your program code to: 
\end_layout

\begin_layout Itemize
output the largest tidal range and the date on which the second tide occurs
 
\end_layout

\begin_layout Itemize
output the smallest tidal range and the date on which the second tide occurs
 
\end_layout

\begin_layout Standard
Use 
\family typewriter
TIDES.TXT
\family default
 to test your program code.
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[NYJC/PRELIM/9569/2021/P2/Q2] 
\end_layout

\begin_deeper
\begin_layout Standard
Name your Jupyter Notebook as 
\end_layout

\begin_layout Standard

\family typewriter
TASK2_<your name>_<centre number>_<index number>.ipynb 
\end_layout

\begin_layout Standard
The task is to implement a todo list using a linkedlist data structure.
 For each of the sub-tasks, add a comment statement, at the beginning of
 the code using the hash symbol ‘
\family typewriter
#
\family default
’, to indicate the sub-task the program code belongs to, for example: 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell multirow="3" alignment="center" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
In[1]:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
# Task 2.1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Program Code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Output:
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Task 2.1 
\end_layout

\begin_layout Standard
The class 
\family typewriter
TodoList
\family default
 represents a LinkedList and has the following attributes: 
\end_layout

\begin_layout Itemize

\family typewriter
__head
\family default
 – a pointer to the first node of the LinkedList; if empty, it has a value
 of 
\family typewriter
None
\family default
 
\end_layout

\begin_layout Itemize

\family typewriter
__tail
\family default
 – a pointer to the last node of the LinkedList; if empty, it has a value
 of 
\family typewriter
None
\family default
 
\end_layout

\begin_layout Standard

\family typewriter
TodoList
\family default
 has the following methods defined on it: 
\end_layout

\begin_layout Itemize

\family typewriter
add(item)
\family default
 – wraps 
\family typewriter
item
\family default
 in a 
\family typewriter
TodoItem
\family default
 instance, and adds it to the end of the LinkedList 
\end_layout

\begin_layout Itemize

\family typewriter
remove(item)
\family default
 – removes the first 
\family typewriter
TodoItem
\family default
 containing 
\family typewriter
item
\family default
 from the LinkedList 
\end_layout

\begin_layout Itemize

\family typewriter
list()
\family default
 – returns a Python list containing each 
\family typewriter
item
\family default
 in the TodoList 
\end_layout

\begin_layout Standard
The class 
\family typewriter
TodoItem
\family default
 represents a Node of the LinkedList and has the following attributes: 
\end_layout

\begin_layout Itemize

\family typewriter
title
\family default
 – a short description of the todo item 
\end_layout

\begin_layout Itemize

\family typewriter
__next
\family default
 – a pointer to the next node in the LinkedList; if this is the last node,
 it has a value of None 
\end_layout

\begin_layout Standard

\family typewriter
TodoItem
\family default
 has the following methods defined on it: 
\end_layout

\begin_layout Itemize
l
\family typewriter
ink_to(todoitem)
\family default
 – links this 
\family typewriter
TodoItem
\family default
 instance to 
\family typewriter
todoitem
\family default
, another instance of the TodoItem class 
\end_layout

\begin_layout Standard
Implement the above classes.
 
\begin_inset space \hfill{}
\end_inset

[13]
\end_layout

\begin_layout Subsubsection*
Task 2.2 
\end_layout

\begin_layout Standard
Add the following items to a new 
\family typewriter
TodoList
\family default
: 
\end_layout

\begin_layout Itemize
“Buy milk” 
\end_layout

\begin_layout Itemize
“Buy flour” 
\end_layout

\begin_layout Itemize
“Buy eggs”
\end_layout

\begin_layout Itemize
“Bake cake” 
\end_layout

\begin_layout Standard
Display the contents of the 
\family typewriter
TodoList
\family default
.
 
\begin_inset space \hfill{}
\end_inset

[7]
\end_layout

\begin_layout Subsubsection*
Task 2.3 
\end_layout

\begin_layout Standard
Remove the following items from the 
\family typewriter
TodoList
\family default
: 
\end_layout

\begin_layout Itemize
“Buy milk” 
\end_layout

\begin_layout Itemize
“Buy eggs” 
\end_layout

\begin_layout Standard
Display the contents of the 
\family typewriter
TodoList
\family default
.
 
\begin_inset space \hfill{}
\end_inset

[3]
\end_layout

\begin_layout Standard
Save your Jupyter Notebook for Task 2.
 
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[NYJC/PRELIM/9569/2021/P2/Q3] 
\end_layout

\begin_deeper
\begin_layout Standard
Name your Jupyter Notebook as 
\end_layout

\begin_layout Standard

\family typewriter
TASK3_<your name>_<centre number>_<index number>.ipynb 
\end_layout

\begin_layout Standard
The task is to write a function that takes a sequence of characters representing
 a colour, and translates the colour into a different number base.
 
\end_layout

\begin_layout Standard
8-bit colours are represented with three numbers, indicating the level of
 the colours red (R), green (G), and blue (B) respectively.
 Each number is an integer from 0 to 255.
 255 represents the fully saturated colour, while 0 represents zero saturation
 (black).
\end_layout

\begin_layout Standard
In HTML, these colours may be represented using hex code as well.
 In hex code, the R, G, and B values are converted to hexadecimal.
 Hex codes begin with the symbol ‘#’ followed by the three R, G, and B hexadecim
al values.
 
\end_layout

\begin_layout Standard
For example, the hex code #0A0B0C represents a colour with RGB values 10,
 11, and 12 respectively.
 
\end_layout

\begin_layout Standard
For each of the sub-tasks, add a comment statement, at the beginning of
 the code using the hash symbol ‘#’, to indicate the sub-task the program
 code belongs to, for example: 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell multirow="3" alignment="center" valignment="middle" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
In[1]:
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
# Task 3.1
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Program Code
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Output:
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Task 3.1 
\end_layout

\begin_layout Standard
Write a function called 
\family typewriter
task3_1(hex)
\family default
 that: 
\end_layout

\begin_layout Itemize
takes 
\family typewriter
hex
\family default
, a string representing a hex code, beginning with a ‘#’ symbol followed
 by three valid hexadecimal values between 00 and FF 
\end_layout

\begin_layout Itemize
returns and displays either: 
\end_layout

\begin_deeper
\begin_layout Itemize
a 3-integer tuple representing RGB values 
\end_layout

\begin_deeper
\begin_layout Standard
or 
\end_layout

\end_deeper
\begin_layout Itemize
the error message, "
\family typewriter
invalid data
\family default
" 
\begin_inset space \hfill{}
\end_inset

[5]
\end_layout

\end_deeper
\begin_layout Standard
Test the function fully with suitable test data.
 
\end_layout

\begin_layout Standard
For example, 
\end_layout

\begin_layout Standard

\family typewriter
task3_1("#FFFFFF") 
\end_layout

\begin_layout Standard
should return and display 
\family typewriter
(255, 255, 255)
\family default

\begin_inset space \hfill{}
\end_inset

 [3]
\end_layout

\begin_layout Subsubsection*
Task 3.2 
\end_layout

\begin_layout Standard
Some image programs do not represent colours using 8-bit integers.
 Instead, they represent them as a normalised float value.
 In this representation, a value of 1.0 represents the fully saturated colour
 and a value of 0 represents zero saturation (black).
 
\end_layout

\begin_layout Standard
Write a second function 
\family typewriter
task3_2(rgb)
\family default
 that: 
\end_layout

\begin_layout Itemize
takes a 3-integer tuple rgb representing RGB values 
\end_layout

\begin_layout Itemize
returns and displays either: 
\end_layout

\begin_deeper
\begin_layout Itemize
a 3-float tuple representing normalised RGB 
\end_layout

\begin_deeper
\begin_layout Standard
or 
\end_layout

\end_deeper
\begin_layout Itemize
the error message, "invalid data" 
\begin_inset space \hfill{}
\end_inset

[5]
\end_layout

\end_deeper
\begin_layout Standard
Test the function fully with suitable test data.
 
\end_layout

\begin_layout Standard
For example, 
\end_layout

\begin_layout Standard

\family typewriter
task3_2((128, 128, 128))
\family default
 
\end_layout

\begin_layout Standard
should return and display
\family typewriter
 (0.50196, 0.50196, 0.50196) 
\end_layout

\begin_layout Standard

\family typewriter
task3_2((255, 255, 255)) 
\end_layout

\begin_layout Standard
should return and display
\family typewriter
 (1.0, 1.0, 1.0)
\family default

\begin_inset space \hfill{}
\end_inset

 [3]
\end_layout

\begin_layout Subsubsection*
Task 3.3 
\end_layout

\begin_layout Standard
Image filters are functions that take in image data and change the RGB values
 of its colours according to an algorithm.
 The algorithm for converting an image to grayscale calculates the average
 of the RGB values and sets the R, G, and B values to this average.
 
\end_layout

\begin_layout Standard
Write a third function 
\family typewriter
task3_3(hex)
\family default
 that:
\end_layout

\begin_layout Itemize
takes hex, a string representing a hex code 
\end_layout

\begin_layout Itemize
returns and displays a 3-float tuple representing normalised RGB of the
 colour converted to grayscale 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Standard
Test the function fully with 
\series bold
two
\series default
 suitable values.
\end_layout

\begin_layout Standard
For example, 
\end_layout

\begin_layout Standard

\family typewriter
task3_3("#FF8000") 
\end_layout

\begin_layout Standard
should return and display 
\family typewriter
(0.5, 0.5, 0.5)
\family default

\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\begin_layout Standard
Save your Jupyter Notebook for Task 3.
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[NYJC/PRELIM/9569/2021/P2/Q4] 
\end_layout

\begin_deeper
\begin_layout Standard
A bookstore uses a text file to store data about its inventory of books.
 The bookshop carries two kinds of books: printed books and virtual books.
 The bookshop wishes to transfer this information into a database.
 
\end_layout

\begin_layout Standard
The bookshop also wishes to create an online bookstore that allows users
 to add books to a shopping cart for purchase.
\end_layout

\begin_layout Subsubsection*
Task 4.1
\end_layout

\begin_layout Standard
Create an SQL file called 
\family typewriter
TASK4_1_<centre number>_<index number>.sql
\family default
 to show the SQL code to create database 
\family typewriter
bookstore.db
\family default
 with three tables: 
\family typewriter
Book
\family default
, 
\family typewriter
Printed
\family default
, and 
\family typewriter
Virtual
\family default
.
 The Printed and Virtual tables represent physical and virtual books respectivel
y, and stores properties unique to each type of book.
 
\end_layout

\begin_layout Standard
The 
\family typewriter
Book
\family default
 table will have the following fields: 
\end_layout

\begin_layout Itemize

\family typewriter
BookID
\family default
 – the primary key, an integer value 
\end_layout

\begin_layout Itemize

\family typewriter
Title
\family default
 – the title of the book 
\end_layout

\begin_layout Itemize

\family typewriter
Price
\family default
 – the price of the book, in cents 
\end_layout

\begin_layout Itemize

\family typewriter
Type
\family default
 – the type of book: "physical" or "virtual" 
\end_layout

\begin_layout Standard
The 
\family typewriter
Printed
\family default
 table will have the following additional field: 
\end_layout

\begin_layout Itemize

\family typewriter
Weight
\family default
 – the weight of the book 
\end_layout

\begin_layout Standard
The 
\family typewriter
Virtual
\family default
 table will have the following additional field: 
\end_layout

\begin_layout Itemize

\family typewriter
DownloadLink
\family default
 – the download link for the book 
\end_layout

\begin_layout Standard
Save your SQL code as 
\end_layout

\begin_layout Standard

\family typewriter
TASK4_1_<your name>_<centre number>_<index number>.sql
\family default
 
\begin_inset space \hfill{}
\end_inset

[6]
\end_layout

\begin_layout Subsubsection*
Task 4.2 
\end_layout

\begin_layout Standard
Python programming language and object-oriented programming will be used
 to implement the online bookstore and shopping cart on a web page.
 
\end_layout

\begin_layout Standard
The class 
\family typewriter
Book
\family default
 will store the following data: 
\end_layout

\begin_layout Itemize

\family typewriter
title
\family default
 – stored as a string 
\end_layout

\begin_layout Itemize

\family typewriter
price
\family default
 – stored as an integer 
\end_layout

\begin_layout Standard
The class 
\family typewriter
Cart
\family default
 will store the following data: 
\end_layout

\begin_layout Itemize

\family typewriter
items
\family default
 – stored as a list of 
\family typewriter
Book
\family default
 objects 
\end_layout

\begin_layout Standard
The class 
\family typewriter
Cart
\family default
 has a method defined on it: 
\end_layout

\begin_layout Itemize

\family typewriter
total_price()
\family default
 – returns an integer representing the total price of books in the cart
 
\end_layout

\begin_layout Standard
Save your program code as 
\end_layout

\begin_layout Standard

\family typewriter
TASK4_2_<your name>_<centre number>_<index number>.py
\family default
 
\begin_inset space \hfill{}
\end_inset

[6]
\end_layout

\begin_layout Standard
The 
\family typewriter
PrintedBook
\family default
 class inherits from 
\family typewriter
Book
\family default
, and stores the following additional data: 
\end_layout

\begin_layout Itemize
weight – stored as an integer 
\end_layout

\begin_layout Standard

\family typewriter
Virtu
\family default
alBook class inherits from 
\family typewriter
Bo
\family default
ok, and stores the following additional data: 
\end_layout

\begin_layout Itemize
download_link – stored as a string 
\end_layout

\begin_layout Standard
Add your program code to 
\end_layout

\begin_layout Standard

\family typewriter
TASK4_2_<your name>_<centre number>_<index number>.py
\family default
 [3] 
\end_layout

\begin_layout Standard
The text file, 
\family typewriter
bookstore.txt
\family default
, contains data items for books stocked by the bookstore.
 Each data item is separated by a comma, with each book’s data on a new
 line as follows: 
\end_layout

\begin_layout Itemize
book title 
\end_layout

\begin_layout Itemize
price 
\end_layout

\begin_layout Itemize
type 
\end_layout

\begin_layout Itemize
weight 
\end_layout

\begin_layout Itemize
download link 
\end_layout

\begin_layout Standard
Write program code to read in the information from the text file, 
\family typewriter
bookstore.txt
\family default
, creating an instance of the appropriate class for each book (either 
\family typewriter
PrintedBook
\family default
 or 
\family typewriter
VirtualBook
\family default
).
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Standard
Write program code to insert all information from the file into the 
\family typewriter
bookstore.db
\family default
 database.
\end_layout

\begin_layout Standard
Run the program.
 Add your program code to 
\end_layout

\begin_layout Standard

\family typewriter
TASK4_2_<your name>_<centre number>_<index number>.py
\family default
 
\begin_inset space \hfill{}
\end_inset

[8]
\end_layout

\begin_layout Subsubsection*
Task 4.3 
\end_layout

\begin_layout Standard
The data from the text file, 
\family typewriter
bookstore.txt
\family default
, is to be used to implement a shopping cart in a web browser.
 
\end_layout

\begin_layout Standard
Write a Python program and the necessary files to create a web application
 that: 
\end_layout

\begin_layout Itemize
displays a list of books stocked by the bookstore 
\end_layout

\begin_layout Itemize
enables the user to add books to a shopping cart using an ID 
\end_layout

\begin_layout Itemize
displays the contents of the shopping cart
\end_layout

\begin_layout Itemize
shows the total price of items in the shopping cart 
\end_layout

\begin_layout Standard
For each book displayed the web page should include the: 
\end_layout

\begin_layout Itemize
book ID 
\end_layout

\begin_layout Itemize
book title 
\end_layout

\begin_layout Itemize
price 
\end_layout

\begin_layout Standard
Save your program as 
\end_layout

\begin_layout Standard

\family typewriter
TASK4_3_<your name>_<centre number>_<index number>.py 
\end_layout

\begin_layout Standard
with any additional files / sub-folders as needed in a folder named 
\end_layout

\begin_layout Standard

\family typewriter
TASK4_3_<your name>_<centre number>_<index number>
\family default

\begin_inset space \hfill{}
\end_inset

 [7]
\end_layout

\begin_layout Standard
Run the web application and add the following books to the shopping cart:
 
\end_layout

\begin_layout Itemize
Title: "Northanger Abbey", Price: 13.99, Type: Physical, Weight: 178g 
\end_layout

\begin_layout Itemize
Title: "War and Peace", Price: 17.49, Type: Physical, Weight: 432g 
\end_layout

\begin_layout Itemize
Title: "Computer Programs", Price: 20.99, Type: Virtual, Link: https://mybookstor
e.com/dJHtFy 
\end_layout

\begin_layout Itemize
Title: "Data Science", Price: 14.99, Type: Virtual, Link: https://mybookstore.com/
fJynJk 
\end_layout

\begin_layout Standard
Save the output of the program as
\end_layout

\begin_layout Standard

\family typewriter
TASK4_3_<your name>_<centre number>_<index number>.html
\family default
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Standard
 
\end_layout

\end_body
\end_document
