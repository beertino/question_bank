#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
9597 ALVL 2017
\end_layout

\begin_layout Subsection
Paper 1
\end_layout

\begin_layout Enumerate

\series bold
[ALVL/9597/2013/P1/Q1] 
\end_layout

\begin_deeper
\begin_layout Standard
The files 
\family typewriter
WORDS1.TXT
\family default
 and 
\family typewriter
WORDS2.TXT
\family default
 store a list of single word computing terms used in a textbook.
\end_layout

\begin_layout Standard
Each entry has the following format: 
\end_layout

\begin_layout Standard

\family typewriter
<computing term>
\end_layout

\begin_layout Standard

\family typewriter
<number>
\end_layout

\begin_layout Standard
One of the file entries (in both files) is:
\end_layout

\begin_layout Standard

\family typewriter
program 
\end_layout

\begin_layout Standard

\family typewriter
52
\end_layout

\begin_layout Standard
This means that after a complete scan of the textbook the word 'program'
 was found 52 times.
\end_layout

\begin_layout Subsubsection*
\noindent
Task 1.1
\end_layout

\begin_layout Standard
Write program code to find and output the term with the highest number of
 occurrences.
 Use the file 
\family typewriter
WORDS1.TXT
\family default
 to test your program.
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 1
\end_layout

\begin_layout Standard
The program code.
 
\begin_inset space \hfill{}
\end_inset

[8]
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 2
\end_layout

\begin_layout Standard
Screenshot of output.
 
\begin_inset space \hfill{}
\end_inset

[1]
\end_layout

\begin_layout Subsubsection*
\noindent
Task 1.2
\end_layout

\begin_layout Standard
Amend your program code so that if more than one term exists with the highest
 number of occurrences, all terms are reported.
 Use the file 
\family typewriter
WORDS2.TXT
\family default
 to test your program.
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 3
\end_layout

\begin_layout Standard
The program code.
 
\begin_inset space \hfill{}
\end_inset

[5]
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 4
\end_layout

\begin_layout Standard
Screenshot of output.
\begin_inset space \hfill{}
\end_inset

 [1]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\begin_layout Standard
 
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[ALVL/9597/2013/P1/Q2] 
\end_layout

\begin_deeper
\begin_layout Standard
A company keeps data about its employees.
 The employee surname and employee ID are recorded.
 
\end_layout

\begin_layout Standard
All employee IDs are unique and have the format C999 where C is any uppercase
 letter and 9 is a digit.
\end_layout

\begin_layout Standard
A program is to be produced to search by either:
\end_layout

\begin_layout Itemize
The surname, which then reports the matching employee ID
\end_layout

\begin_layout Itemize
The employee ID, which then reports the matching surname
\end_layout

\begin_layout Standard
The programmer stores the data a two 1-dimensional arrays and produces the
 following search algorithm to search a string array and output the matching
 value from the second array.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
INPUT SearchItem 
\end_layout

\begin_layout Plain Layout

\family typewriter
FOR Index ← 1 TO UpperBound 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

IF SearchItem = Array1[Index] 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

THEN OUTPUT Array2[Index] 
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

ENDIF 
\end_layout

\begin_layout Plain Layout

\family typewriter
ENDFOR
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This search algorithm is inefficient.
\end_layout

\begin_layout Standard
The programmer uses the following design to produce the program code:
\end_layout

\begin_layout Itemize
code to search by surname 
\end_layout

\begin_layout Itemize
The search algorithm has 
\family typewriter
Surname
\family default
 as 
\family typewriter
Array1
\family default
 and 
\family typewriter
EmployeeID
\family default
 as 
\family typewriter
Array2
\family default
 followed by code to search by employee ID 
\end_layout

\begin_layout Itemize
The search algorithm has 
\family typewriter
EmployeeID
\family default
 as 
\family typewriter
Array1
\family default
 and 
\family typewriter
Surname
\family default
 as 
\family typewriter
Array2
\end_layout

\begin_layout Standard
This design would produce repetition of code.
\end_layout

\begin_layout Subsubsection*
\noindent
Task 2.1
\end_layout

\begin_layout Standard
Write program code which performs each of the searches:
\end_layout

\begin_layout Itemize
Search by surname 
\end_layout

\begin_layout Itemize
Search by employee ID
\end_layout

\begin_layout Standard
Your code should address the issues of inefficiency and repetition of code
 described in the scenario above.
 
\end_layout

\begin_layout Standard
Use the sample array data available from the text file 
\family typewriter
EMPLOYEEDATA.txt
\family default
 and paste this into your program code.
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 5
\end_layout

\begin_layout Standard
Your program code.
\begin_inset space \hfill{}
\end_inset

 [11]
\end_layout

\begin_layout Subsubsection*
\noindent
Task 2.2
\end_layout

\begin_layout Standard
Devise a set of four test cases with the data to be used.
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 6
\end_layout

\begin_layout Standard
A screenshot for each test case you considered.
 Annotate the screenshot explaining the purpose of each test.
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\begin_layout Standard
 
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[ALVL/9597/2013/P1/Q3] 
\end_layout

\begin_deeper
\begin_layout Standard
The task is to store a dataset (maximum size 20 items) as a binary tree
 structure.
 You should assume that the data items are unique.
\end_layout

\begin_layout Standard
The program will use a user-defined type Node for each node defined as follows:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \hspace{}
\length 1col%
\end_inset


\family default
Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \hspace{}
\length 1col%
\end_inset


\family default
Data Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \hspace{}
\length 5col%
\end_inset


\family default
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
LeftP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The left pointer for the node
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Data
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
STRING
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The node's data value
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
RightP
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
INTEGER 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The right pointer for the node
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
A linked list is maintained of all the unused nodes which do not form part
 of the tree.
 The first available node which is used for a new term is indicated by NextFreeP
osition.
 Items in the unused list are linked using their left pointers.
\end_layout

\begin_layout Standard
The binary tree and linked list are implemented using variables as follows:
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \hspace{}
\length 1col%
\end_inset


\family default
Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \hspace{}
\length 1col%
\end_inset


\family default
Data Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \hspace{}
\length 5col%
\end_inset


\family default
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ThisTree
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
ARRAY[20] : Node
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The tree data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Root 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index for the root position of the 
\family typewriter
ThisTree
\family default
 array
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
NextFreePosition
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
INTEGER 
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Index for the next unused node
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename C:/Users/Admin/Desktop/Github/question_bank/LyX/static/img/9597-ALVL-2013-P1-Q3.png
	width 50page%

\end_inset


\end_layout

\begin_layout Standard
The diagram shows the binary tree and linked list after four values have
 been added.
\end_layout

\begin_layout Subsubsection*
\noindent
Task 3.1
\end_layout

\begin_layout Standard
Write the program code to declare all the required variables and create
 the initial linked list which contains all 20 nodes.
 Add statement(s) to initialise the empty tree.
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset

[10]
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 7
\end_layout

\begin_layout Standard
Your program code for Task 3.1.
 [11]
\end_layout

\begin_layout Standard
The following (incomplete) pseudocode inserts a data value into the binary
 tree structure.
\end_layout

\begin_layout Standard
The 
\family typewriter
LastMove
\family default
 variable holds the direction of the previous traversal move as follows:
\end_layout

\begin_layout Standard
X - no move yet made 
\end_layout

\begin_layout Standard
L - move was to the left 
\end_layout

\begin_layout Standard
R - move was to the right
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
PROCEDURE AddItemToBinaryTree(NewFreeItem)
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

IF Root = 0
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

THEN
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Root ← NextFreePosition
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ELSE
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// traverse the tree to find the position for the new value
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

CurrentPosition ← Root
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

LastMove ← 'X'
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

REPEAT
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

PreviousPosition ← CurrentPosition
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

IF NewFreeItem < ThisTree[CurrentPosition].Data
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

THEN
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// move left
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

LastMove ← 'L'
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

CurrentPosition ← ThisTree[CurrentPosition].LeftP
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ELSE
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

// move right
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

LastMove ← 'R'
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

CurrentPosition ← ThisTree[CurrentPosition].RightP
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ENDIF
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

UNTIL CurrentPosition = 0
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

ENDIF
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

IF LastMove = 'R'
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

THEN
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ThisTree[PreviousPosition].RightP ← NextFreePosition
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ELSE
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

ThisTree[PreviousPosition].LeftP ← NextFreePosition
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

ENDIF
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

NextFreePosition ThisTree[NextFreePosition].LeftP
\end_layout

\begin_layout Plain Layout

\family typewriter
ENDPROCEDURE
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note: The above text is available in the text file 
\family typewriter
PSEUDOCODE_TASK_3_2.TXT
\end_layout

\begin_layout Subsubsection*
\noindent
Task 3.2
\end_layout

\begin_layout Standard
Write non-recursive code to implement the 
\family typewriter
AddItemToBinaryTree
\family default
 procedure.
 You may use the text file 
\family typewriter
PSEUDOCODE_TASK_3_2.TXT
\family default
 as a basis for the writing of your code.
\end_layout

\begin_layout Standard
The given pseudocode is incomplete as:
\end_layout

\begin_layout Itemize
it does not initially test that there is space available for a new item
 
\end_layout

\begin_layout Itemize
it does not assign 
\family typewriter
NewTreeItem
\family default
 to the data field of the 
\family typewriter
ThisTree
\family default
 array
\end_layout

\begin_layout Standard
Add these requirements to your program solution.
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 8
\end_layout

\begin_layout Standard
Your program code for Task 3.2.
\begin_inset space \hfill{}
\end_inset

 [6]
\end_layout

\begin_layout Subsubsection*
\noindent
Task 3.3
\end_layout

\begin_layout Standard
Write a procedure
\family typewriter
 OutputData
\family default
 which displays the value of 
\family typewriter
Root
\family default
, the value of 
\family typewriter
NextFreePosition
\family default
 and the contents of 
\family typewriter
ThisTree
\family default
 in index order.
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 9
\end_layout

\begin_layout Standard
Your program code for Task 3.3.
 
\begin_inset space \hfill{}
\end_inset

[5]
\end_layout

\begin_layout Subsubsection*
\noindent
Task 3.4
\end_layout

\begin_layout Standard
Write a main program to:
\end_layout

\begin_layout Itemize
Input new data items and add them to the binary tree by calling procedure
 
\family typewriter
AddItemToBinaryTree
\family default
.
 The input is terminated with value "
\family typewriter
XXX
\family default
".
 Do not attempt to validate the input of the country names.
 
\end_layout

\begin_layout Itemize
Your program will then call procedure 
\family typewriter
OutputData
\family default
.
\end_layout

\begin_layout Standard
Run the program with the input of the single value "
\family typewriter
XXX
\family default
".
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 10
\end_layout

\begin_layout Standard
Screenshot showing the output from running the program in Task 3.4.
\begin_inset space \hfill{}
\end_inset

 [3]
\end_layout

\begin_layout Subsubsection*
\noindent
Task 3.5
\end_layout

\begin_layout Standard
Test your program using the following data items input in the order shown:
\end_layout

\begin_layout Standard
\align center

\family typewriter
INDIA, NEPAL, MALAYSIA, SINGAPORE, BURMA, CANADA, LATVIA, XXX
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 11
\end_layout

\begin_layout Standard
Provide screenshot test evidence for Task 3.5.
 
\begin_inset space \hfill{}
\end_inset

[5]
\end_layout

\begin_layout Standard
Further program code is required to carry out an 
\series bold
in-order traversal
\series default
.
\end_layout

\begin_layout Subsubsection*
\noindent
Task 3.6
\end_layout

\begin_layout Standard
Write a recursive procedure to carry out an in-order tree traversal.
 
\end_layout

\begin_layout Standard
Include a call to the procedure from your main program.
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 12
\end_layout

\begin_layout Standard
Your program code.
 
\begin_inset space \hfill{}
\end_inset

[8]
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 13
\end_layout

\begin_layout Standard
Produce a screenshot for the Task 3.5 dataset confirming the output of the
 countries in alphabetical order.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\begin_layout Standard
 
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[ALVL/9597/2013/P1/Q4] 
\end_layout

\begin_deeper
\begin_layout Standard
The task is to input data for a frequency distribution and then output to
 the screen a horizontal bar chart.
\end_layout

\begin_layout Standard
The data is input as an X value followed by its frequency.
 Assume the frequency is always in the range 0 to 60 and there are no more
 than six X values.
\end_layout

\begin_layout Standard
The input shown below shows the number of sweatshirts sold in a retail shop
 over a one week period; for example there were 39 XL items sold
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
Next X value ...
 <ZZZ to END> XS 
\end_layout

\begin_layout Plain Layout

\family typewriter
Frequency ...
 12 
\end_layout

\begin_layout Plain Layout

\family typewriter
Next X value ...
 <ZZZ to END> S 
\end_layout

\begin_layout Plain Layout

\family typewriter
Frequency ...
 22 
\end_layout

\begin_layout Plain Layout

\family typewriter
Next X value ...
 <ZZZ to END> M 
\end_layout

\begin_layout Plain Layout

\family typewriter
Frequency ...
 45 
\end_layout

\begin_layout Plain Layout

\family typewriter
Next X value ...
 <ZZZ to END> L 
\end_layout

\begin_layout Plain Layout

\family typewriter
Frequency ...
 56 
\end_layout

\begin_layout Plain Layout

\family typewriter
Next X value ...
 <ZZZ to END> XL 
\end_layout

\begin_layout Plain Layout

\family typewriter
Frequency ...
 39 
\end_layout

\begin_layout Plain Layout

\family typewriter
Next X value ...
 <ZZZ to END> XXL
\end_layout

\begin_layout Plain Layout

\family typewriter
Frequency ...
 11 
\end_layout

\begin_layout Plain Layout

\family typewriter
Next X value ...
 <ZZZ to END> ZZZ
\end_layout

\begin_layout Plain Layout

\family typewriter
++++++++++++++++++++++++++++++++++++++++
\end_layout

\begin_layout Plain Layout

\family typewriter
Frequency distribution 
\end_layout

\begin_layout Plain Layout

\family typewriter
++++++++++++++++++++++++++++++++++++++++
\end_layout

\begin_layout Plain Layout

\family typewriter
XS 
\begin_inset space ~
\end_inset

@@@@@@@@@@@@ 
\end_layout

\begin_layout Plain Layout

\family typewriter
S 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

@@@@@@@@@@@@@@@@@@@@@@ 
\end_layout

\begin_layout Plain Layout

\family typewriter
M 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
\end_layout

\begin_layout Plain Layout

\family typewriter
L 
\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
\end_layout

\begin_layout Plain Layout

\family typewriter
XL 
\begin_inset space ~
\end_inset

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 
\end_layout

\begin_layout Plain Layout

\family typewriter
XXL @@@@@@@@@@@
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
\noindent
Task 4.1
\end_layout

\begin_layout Standard
Write a program which inputs a set of X values and frequencies and produces
 output in the format shown.
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 14
\end_layout

\begin_layout Standard
Your program code for Task 4.1.
\begin_inset space \hfill{}
\end_inset

[8]
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 15
\end_layout

\begin_layout Standard
A screenshot to confirm the dataset used and the output produced.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Standard
The appearance of the bar chart display is to be improved as follows:
\end_layout

\begin_layout Itemize
Each bar is to be represented by more than one line of the same character
 to that its bar width is increased.
 
\end_layout

\begin_layout Itemize
Each bar will be shown with the same number of lines.
 
\end_layout

\begin_layout Itemize
The complete bar chart, including the heading, is to take up no more than
 40 lines.
 
\end_layout

\begin_layout Itemize
The line width for the output is exactly 80 characters.
 
\end_layout

\begin_layout Itemize
Its appearance could be improved by changing the @ character.
\end_layout

\begin_layout Subsubsection*
\noindent
Task 4.2
\end_layout

\begin_layout Standard
Write code to produce a new chart for the data used in Task 4.1 showing the
 maximum possible bar width and any other refinements you have introduced.
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 16
\end_layout

\begin_layout Standard
Your program code for Task 4.2.
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 17
\end_layout

\begin_layout Standard
A screenshot showing the data entry followed by the bar chart.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Standard
Some datasets will have a frequency which is greater than 60 and so the
 frequencies of the dataset can no longer be shown with a corresponding
 number of characters in the line.
 The frequencies will need to be scaled before the output is attempted.
\end_layout

\begin_layout Standard
The bar chart would benefit by the inclusion of a horizontal axis labelled
 with a scale showing the frequency values.
\end_layout

\begin_layout Subsubsection*
\noindent
Task 4.3
\end_layout

\begin_layout Standard
Revise your program code to meet these new requirements.
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 18
\end_layout

\begin_layout Standard
Your program code for Task 4.3.
\begin_inset space \hfill{}
\end_inset

 [8]
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 19
\end_layout

\begin_layout Standard
Screenshots demonstrating: 
\end_layout

\begin_layout Itemize
Dataset 1 as used in Task 4.1 which needs no scaling 
\end_layout

\begin_layout Itemize
Dataset 2 of your choice to demonstrate frequencies which must be scaled
 
\end_layout

\begin_layout Itemize
Dataset 3 of your choice to demonstrate frequencies which must be scaled
 differently to Dataset 2 
\end_layout

\begin_layout Standard
\begin_inset space \hfill{}
\end_inset

[6]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[ALVL/9597/2013/P2/Q1] 
\end_layout

\begin_deeper
\begin_layout Standard
A dental practice currently uses a computer system to store details of its
 patients, staff and appointments in separate files.
\end_layout

\begin_layout Standard
The practice manager and the receptionist have their own computers for accessing
 and updating the files.
\end_layout

\begin_layout Standard
The system produces a small number of reports.
\end_layout

\begin_layout Standard
An updated system is to be produced by a software company.
 The updated system will use a database.
 In the updated system the dentists will be given a hand-held device to
 use in their rooms for accessing and updating the patient records.
 The new system will also be capable of producing additional reports.
\end_layout

\begin_layout Standard
The software company has software engineers who have expert skills in specific
 areas of software development.
 A number of the engineers will be involved in the development of the updated
 system.
\end_layout

\begin_layout Enumerate
Describe and justify three methods which can be used to determine what further
 reports are required from the updated computer system.
 [6]
\end_layout

\begin_layout Enumerate
The work to update the system is partly managed by the following Program
 Evaluation and Review Technique (PERT) chart.
\end_layout

\begin_deeper
\begin_layout Standard
A - investigation 
\end_layout

\begin_layout Standard
B - analysis 
\end_layout

\begin_layout Standard
C - design of database 
\end_layout

\begin_layout Standard
D - design of reports 
\end_layout

\begin_layout Standard
E - design of screen displays for dentists 
\end_layout

\begin_layout Standard
F - transfer of data from files into database 
\end_layout

\begin_layout Standard
G - documentation produced 
\end_layout

\begin_layout Standard
H - acceptance testing 
\end_layout

\begin_layout Standard
I - hand over to customer
\end_layout

\begin_layout Standard
Time is measured in weeks.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename C:/Users/Admin/Desktop/Github/question_bank/LyX/static/img/9597-ALVL-2013-P2-Q1-1.png
	width 50page%

\end_inset


\end_layout

\begin_layout Enumerate
State the critical path.
\begin_inset space \hfill{}
\end_inset

 [1]
\end_layout

\begin_layout Enumerate
State the minimum time in which the updated system could be operational.
 
\begin_inset space \hfill{}
\end_inset

[1]
\end_layout

\begin_layout Enumerate
For activity E state the 
\end_layout

\begin_deeper
\begin_layout Itemize
earliest Start time 
\end_layout

\begin_layout Itemize
earliest Finish time 
\end_layout

\begin_layout Itemize
latest Start time
\end_layout

\begin_layout Itemize
latest Finish time
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\color white
_
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename C:/Users/Admin/Desktop/Github/question_bank/LyX/static/img/9597-ALVL-2013-P2-Q1-2.png
	width 50page%

\end_inset


\end_layout

\begin_layout Standard
The Gantt chart above is based on the information in part 
\series bold
(b)
\series default
.
 The timing of two activities is missing and also the timing of one of the
 activities shown is incorrect.
\end_layout

\begin_layout Standard
Draw a sketch of the Gantt chart to show the correct version.
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\end_deeper
\begin_layout Enumerate
Explain how the Gantt chart can help with the work that the software engineers
 have to carry out.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Enumerate
A small team is put together to consider security aspects of the updated
 system.
\end_layout

\begin_deeper
\begin_layout Enumerate
Identify 
\series bold
two
\series default
 possible members of the team and justify your choice.
\begin_inset space \hfill{}
\end_inset

 [4]
\end_layout

\begin_layout Standard
The team have to produce a report to which they all make a contribution.
 The report is stored on a network.
 Each member of the team has access to allow them to add their contribution.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
ii
\end_layout

\end_inset

 Give 
\series bold
two
\series default
 examples of unethical behaviour by a team member.
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\end_deeper
\begin_layout Enumerate
Name and describe 
\series bold
two
\series default
 types of documentation produced for this project.
\begin_inset space \hfill{}
\end_inset

 [6]
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout
End-User documentation 
\end_layout

\begin_layout Itemize
for actual users of system to learn about features and how to use them 
\end_layout

\begin_layout Itemize
minimum/recommended hardware and software system requirements (operating
 system, version, processor, amount of RAM and hard disk space, etc.) 
\end_layout

\begin_layout Itemize
installation guide + step by step guide of how to perform a task or use
 a feature 
\end_layout

\begin_layout Itemize
frequently asked questions (FAQ) for common troubleshooting problems and
 solutions 
\end_layout

\begin_layout Itemize
support contact information, safety instructions, warranty information
\end_layout

\begin_layout Plain Layout
Technical documentation
\end_layout

\begin_layout Itemize
for developers to document technical requirements and features of system
\end_layout

\begin_layout Itemize
system objectives and scope 
\end_layout

\begin_layout Itemize
input and output/report specifications 
\end_layout

\begin_layout Itemize
data storage/database specification 
\end_layout

\begin_layout Itemize
modules/processes and algorithms 
\end_layout

\begin_layout Itemize
user interfaces and application programming interfaces (APIs) 
\end_layout

\begin_layout Itemize
testing
\end_layout

\begin_layout Itemize
implementation/deployment 
\end_layout

\begin_layout Itemize
bugs report and known issues
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
The hand-held devices the dentists use in their practice rooms will be networked.
 Both client-side scripting and server-side scripting will be used in the
 new software which is produced.
 An intranet with a web server will be created.
 Web browsers will be used on the hand-held devices.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(g)
\end_layout

\end_inset

 Describe three possible uses of the device.
\begin_inset space \hfill{}
\end_inset

 [6]
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(h)
\end_layout

\end_inset

 For each scripting method, client-side scripting and server-side scripting,
 give an appropriate example.
 Justify your response.
\begin_inset space \hfill{}
\end_inset

 [4]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[ALVL/9597/2013/P2/Q2] 
\end_layout

\begin_deeper
\begin_layout Standard
Examination centres receive examination results for their candidates as
 a printed report.
 The report lists the candidates in order based on their Index Number.
 For each candidate their results occupy one row of the report.
 Each row displays the results for all subjects that the candidate sat in
 the examination.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename C:/Users/Admin/Desktop/Github/question_bank/LyX/static/img/9597-ALVL-2013-P2-Q2-1.png
	width 50page%

\end_inset


\end_layout

\begin_layout Standard
Candidates can only take examinations at one centre in a particular session.
\end_layout

\begin_layout Standard
Currently the candidate results for each centre are stored in a separate
 file.
 The software that produces the above report is written in a programming
 language.
\end_layout

\begin_layout Enumerate
Describe, using an example, why this file has data redundancy.
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\begin_layout Enumerate
An extra field is added to the file, but the report will not include this
 new field.
 
\end_layout

\begin_deeper
\begin_layout Standard
Describe the problem that will arise.
 
\begin_inset space \hfill{}
\end_inset

[3]
\end_layout

\end_deeper
\begin_layout Standard
A normalised database solution to this problem is designed, which has a
 number of tables.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(c)
\end_layout

\end_inset

 Draw an E-R diagram that shows these tables and the relationships between
 them.
\begin_inset space \hfill{}
\end_inset

 [5]
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(d)
\end_layout

\end_inset

 When the data are stored in a database, privacy is of great concern.
\end_layout

\begin_deeper
\begin_layout Standard
Explain why.
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\end_deeper
\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[ALVL/9597/2013/P2/Q3] 
\end_layout

\begin_deeper
\begin_layout Standard
A hash table has an index range of 1 to 900.
 The following pseudocode describes an algorithm for searching the table
 using the hashing function Hash.
 It is assumed that the key is present in the table.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
01 Index <- Hash(Key) 
\end_layout

\begin_layout Plain Layout

\family typewriter
02 WHILE Table[Index, 1] <> Key 
\end_layout

\begin_layout Plain Layout

\family typewriter
03 
\begin_inset space \qquad{}
\end_inset

Index <- Index + 1 
\end_layout

\begin_layout Plain Layout

\family typewriter
04 ENDWHILE 
\end_layout

\begin_layout Plain Layout

\family typewriter
05 Value <- Table[Index, 2]
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Explain the purpose of:
\end_layout

\begin_deeper
\begin_layout Enumerate
line 3
\end_layout

\begin_layout Enumerate
line 5
\begin_inset space \hfill{}
\end_inset

 [4]
\end_layout

\end_deeper
\begin_layout Enumerate
Describe a problem that might occur with a key which, when hashed, produces
 an index of 900.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Enumerate
What modification to the algorithm is required to overcome this problem?
 
\begin_inset space \hfill{}
\end_inset

[3]
\end_layout

\begin_layout Enumerate
Explain how a new item can be added to this hash table.
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[ALVL/9597/2013/P2/Q4] 
\end_layout

\begin_deeper
\begin_layout Standard
A software development company currently hosts its own email server.
 The company is considering a replacement webmail service, using cloud computing.
\end_layout

\begin_layout Enumerate
(a) State two advantages of this change.
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\begin_layout Enumerate
(b) State one disadvantage of this change.
 
\begin_inset space \hfill{}
\end_inset

[1]
\end_layout

\begin_layout Standard
The company is also considering other uses of the cloud.
 These include collaborative activities between employees of the company
 and also assistance in developing new software.
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(c)
\end_layout

\end_inset

 Describe an example of how employees of the company may use the cloud to
 work collaboratively.
\begin_inset space \hfill{}
\end_inset

 [3]
\end_layout

\begin_layout Enumerate
\begin_inset Argument item:1
status open

\begin_layout Plain Layout
(d)
\end_layout

\end_inset

 Describe how the cloud can be beneficial to the company when developing
 new software for a client.
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[ALVL/9597/2013/P2/Q5] 
\end_layout

\begin_deeper
\begin_layout Standard
Bank customers are allowed to withdraw money from their accounts at an ATM.
 They cannot withdraw more than the current balance in their account.
 There is a daily limit on the amount that can be withdrawn.
 In some circumstances a charge is made for the transaction.
 The rules are:
\end_layout

\begin_layout Itemize
the transaction is rejected if the withdrawal amount requested is greater
 than the current balance 
\end_layout

\begin_layout Itemize
the transaction is rejected if the withdrawal amount exceeds the daily limit
 
\end_layout

\begin_layout Itemize
if the current balance before the transaction is carried out is less than
 50 dollars then any successful transaction incurs a fixed charge
\end_layout

\begin_layout Enumerate
Create a decision table showing all the possible conditions and actions.
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Enumerate
Simplify your decision table by removing redundancies.
 
\begin_inset space \hfill{}
\end_inset

[4]
\end_layout

\begin_layout Enumerate
Using your answer in (b) write a function using pseudocode.
 The function returns:
\end_layout

\begin_deeper
\begin_layout Itemize
-1 to indicate a rejection; 
\end_layout

\begin_layout Itemize
0 for a charge-free successful transaction; 
\end_layout

\begin_layout Itemize
the charge for a chargeable successful transaction.
\begin_inset space \hfill{}
\end_inset

 [5]
\end_layout

\end_deeper
\begin_layout Enumerate
State two ways in which your answer in (c) demonstrates clarity of code.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Enumerate

\series bold
[ALVL/9597/2013/P2/Q6] 
\end_layout

\begin_deeper
\begin_layout Standard
The ASCII code for the character 'Z', expressed as a denary integer, is
 90.
\end_layout

\begin_layout Enumerate
Express the denary integer 90 as:
\end_layout

\begin_deeper
\begin_layout Enumerate
an eight-bit binary number
\end_layout

\begin_layout Enumerate
a hexadecimal number 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\end_deeper
\begin_layout Enumerate
Give two reasons why hexadecimal numbers are used in computing.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Enumerate
State the ASCII code for 'X' in denary.
 Explain your answer.
\begin_inset space \hfill{}
\end_inset

 [2]
\end_layout

\begin_layout Enumerate
Explain why the Unicode encoding system has replaced ASCII.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Enumerate
Describe a method of storing strings of characters of variable length in
 a computer.
 
\begin_inset space \hfill{}
\end_inset

[2]
\end_layout

\begin_layout Standard
[SPLIT_HERE]
\end_layout

\end_deeper
\begin_layout Standard
 
\end_layout

\end_body
\end_document
