#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 2.5cm
\rightmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
9597 HCI 2019
\end_layout

\begin_layout Subsection
Paper 1
\end_layout

\begin_layout Enumerate
The manager of a private carpark wants to process the daily data of people
 using the carpark.
 The carpark is open from 8am to 11pm and the carpark charge is as follows:
\end_layout

\begin_deeper
\begin_layout Itemize
Before 5pm: $1.50 per hour or part thereof 
\end_layout

\begin_layout Itemize
After 5pm, $3.00 per entry regardless of the duration
\end_layout

\begin_layout Standard
However, if a car enters before 5pm and leaves after 5pm, the charge involves
 both rules.
 For example, if the car stays in the carpark from 2.45pm to 6.30pm, it is
 broken down to 2 hours 15 minutes before 5pm and 1 hour 30 minutes after
 5pm.
 Hence the charge will be $1.50 * 3 + $3.00 = $7.50.
 
\end_layout

\begin_layout Standard
Each day the carpark electronic system generates a file 
\family typewriter
CARPARK.txt
\family default
.
 Each record in the file has the following format:
\end_layout

\begin_layout Standard
\align center

\family typewriter
<CARPLATE NUMBER>,<START TIME>,<END TIME>
\end_layout

\begin_layout Standard
For example, 
\family typewriter
SLX2315A
\family default
, 
\family typewriter
0940
\family default
, 
\family typewriter
1415
\family default
 means that a car with car plate number SLX2315A entered the carpark at
 9.40am and left at 2.15pm.
 
\end_layout

\begin_layout Standard
You are 
\series bold
not
\series default
 allowed to use any built-in functions for time processing.
 
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Subsubsection*
\noindent
Task 1.1
\end_layout

\begin_layout Plain Layout
Write program code for the 
\family typewriter
Price
\family default
 function using the following specification:
\end_layout

\begin_layout Plain Layout
\align center

\family typewriter
FUNCTION Price (start: STRING, end: STRING) : FLOAT
\end_layout

\begin_layout Plain Layout
The function has two string parameters 
\family typewriter
start
\family default
, 
\family typewriter
end
\family default
 which refers to the start and end time when the car parked.
 The function returns the carpark charge as a float.
 
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 1
\end_layout

\begin_layout Plain Layout
Your program code.
 [5]
\end_layout

\begin_layout Subsubsection*
\noindent
Task X.X
\end_layout

\begin_layout Plain Layout
Write a program code to perform the following task for the manager:
\end_layout

\begin_layout Itemize
Read data from CARPARK.txt 
\end_layout

\begin_layout Itemize
Write all the car plate numbers and corresponding carpark charges to another
 file CHARGE.txt, in the following format: 
\end_layout

\begin_deeper
\begin_layout Plain Layout
\align center

\family typewriter
<CARPLATE NUMBER>, <CARPARK CHARGE>
\end_layout

\begin_layout Plain Layout
\align center

\family typewriter
<CARPLATE NUMBER>, <CARPARK CHARGE>
\end_layout

\end_deeper
\begin_layout Itemize
Output the total charges for the day
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 2
\end_layout

\begin_layout Plain Layout
Your program code.
 
\begin_inset space \hfill{}
\end_inset

[7]
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence 3
\end_layout

\begin_layout Plain Layout
One screenshot showing the program output and contents of 
\family typewriter
CHARGE.txt
\family default
 from running the program.
\begin_inset space \hfill{}
\end_inset

 [3]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
2.
 When a list of integers has repeated numbers, the searching and sorting
 algorithms can be different.
 The task is to perform an insertion sort before a binary search is executed.
 
\end_layout

\begin_layout Standard
Task 2.1 Write the program code for a procedure to implement insertion sort
 in ascending order.
 The input parameter is a list of integers which may have repeated numbers.
 Evidence 4 Your program code.
 [4]
\end_layout

\begin_layout Standard
Task 2.2 Write the program code for a procedure to implement binary search
 for a targeted integer.
 The input parameter is an ordered list of integers which may have repeated
 numbers.
 The procedure outputs all the indices at which the target appears, or −1
 if the target is not found.
 
\end_layout

\begin_layout Standard
Evidence 5 Your program code.
 [9]
\end_layout

\begin_layout Standard
Task 2.3 The file NUMBERS.txt contains one integer at each line.
 Write a program that uses the procedures in previous tasks and performs
 the following task: 
\end_layout

\begin_layout Standard
• Reads the text file NUMBERS.txt, • Perform insertion sort, and outputs
 the list of integers in a row, • Prompts the user to provide a target to
 be searched, • Perform a binary search and output an appropriate message
\end_layout

\begin_layout Standard
Evidence 6 Your program code.
 [4]
\end_layout

\begin_layout Standard
Task 2.4 Draw up three suitable tests and provide screenshot evidence for
 your testing.
 
\end_layout

\begin_layout Standard
Evidence 7 Annotated screenshots for each test data run.
 [3]
\end_layout

\begin_layout Standard
3.
 The examinations department of a school needs to keep long-term records
 of the overall examination achievements of its students.
\end_layout

\begin_layout Standard
Students at the school have two main choices.
 Firstly, they can take a variety of subjects and achieve an Academic Diploma.
 A diploma gives them the opportunity to go to university.
 Secondly they can achieve a Skills Certificate where they focus on one
 particular area (such as IT).
 This gives them the necessary skills to start a career in their chosen
 area.
\end_layout

\begin_layout Standard
The examinations department decides to store the following data:
\end_layout

\begin_layout Standard
• StudID is used to uniquely identify a particular student and is six digits.
 The first four digits represent the year that the student started at the
 school and the last two digits are used to make the StudID unique e.g.
 201804.
\end_layout

\begin_layout Standard
• Name is the name of the student and is at most 30 characters.
\end_layout

\begin_layout Standard
• StudType is the type of student and can have the values ‘D’ or ‘S’.
\end_layout

\begin_layout Standard
• SkillArea is text and gives the area that the student acquired skills
 in.
 It can have one of three values: ‘IT’, ‘Business’ or ‘Accountancy’.
\end_layout

\begin_layout Standard
• NoOfSub is the number of subjects studied by those taking the Diploma.
 
\end_layout

\begin_layout Standard
• Result is a single character and is used to indicate the overall grade
 awarded.
 For those students who took the Skills Certificate the grades could be
 Distinction (D), Merit (M), Pass (P) or Fail (F).
 For those who took the Diploma the grade could be one of the letters A
 to F.
 Grade A to E are passes.
 Grade F is a fail.
\end_layout

\begin_layout Standard
The program design for a solution to this problem is to be implemented with
 object-oriented programming with the following three classes:
\end_layout

\begin_layout Standard
Student
\end_layout

\begin_layout Standard
Diploma SkillsCert 
\end_layout

\begin_layout Standard
Task 3.1 Write program code to define the classes Student, Diploma and SkillsCert.
\end_layout

\begin_layout Standard
Evidence 8 Program code for the three classes in Task 3.1.
 [6]
\end_layout

\begin_layout Standard
Assume that a file, STUDENT.txt, which contains details of each student,
 has been created for you.
 The format of each student record is as follows: <StudID>|<Name>|<StudType>|<Sk
illArea>|<NoOfSub>|<Result>
\end_layout

\begin_layout Standard
• SkillArea would have the value ‘Diploma’ if the student is taking a Diploma.
 • NoOfSub would have the value 0 for those taking the Skills Certificate.
 • Result is left blank initially.
 
\end_layout

\begin_layout Standard
Task 3.2 Write a module, ENTER_RESULT, which, when called, will ask the user
 for a particular StudID whose result is to be entered.
 Using the student ID that has been input, the corresponding student record
 will be located in STUDENT.txt.
 The student data will be displayed to the user.
 The user will be allowed to enter the result for the student.
 The amended record will be stored back in STUDENT.txt.
 
\end_layout

\begin_layout Standard
The student ID and result that have been input should be validated.
 If the StudID does not exist, the user will be given an appropriate message.
\end_layout

\begin_layout Standard
You are expected to make use of the classes you designed in Task 3.1.
\end_layout

\begin_layout Standard
Run the program three times.
 Use the following data input, and produce a screenshot for each.
 StudID Result 201701 A 201801 B 201901 M Evidence 9 Program code for Task
 3.2 [8]
\end_layout

\begin_layout Standard
Evidence 10 Three screenshots showing the test runs and final contents of
 STUDENT.txt to show evidence that successful updates have been carried out.
 [2] 
\end_layout

\begin_layout Standard
Task 3.3 Implement code as specified below.
\end_layout

\begin_layout Standard
A report should be generated and displayed which will list the students
 whose result has still not been entered into the STUDENT.txt file.
 The report will list, for each different starting year: 
\end_layout

\begin_layout Standard
• StudID • Name • StudType • SkillArea or NoOfSub depending upon the value
 of StudType 
\end_layout

\begin_layout Standard
In addition the number of each student type for each year will also be output.
\end_layout

\begin_layout Standard
A sample output is shown below.
\end_layout

\begin_layout Standard
Year: 2017 --------------------------------------------------------------
 201715 FLoo D 6 201708 BLang D 5 201710 LArms S IT Diplomas: 2 Skills:
 1
\end_layout

\begin_layout Standard
Year: 2018 --------------------------------------------------------------
 201813 EJean D 7 201817 ABright D 7 Diplomas: 2 Skills: 0
\end_layout

\begin_layout Standard
Year: 2019 ---------------------------------------------------------------
 201905 Alfie S Business 201903 GKoh D 8 Diplomas: 1 Skills: 1
\end_layout

\begin_layout Standard
Evidence 11 Program code for Task 3.3.
 [8]
\end_layout

\begin_layout Standard
Evidence 12 Screenshot of the output produced.
 [2]
\end_layout

\begin_layout Standard
4.
 A game maintains the player IDs and their scores in an ordered linked list.
 The player with the highest score is stored at the first node while the
 player with the lowest score is stored at the last node.
 
\end_layout

\begin_layout Standard
The program to implement the linked list abstract data type will use two
 classes, ListNode and LinkedList.
 
\end_layout

\begin_layout Standard
The ListNode class has the following properties: Identifier Data Type Descriptio
n ID STRING The ID of the player.
 All IDs are unique and have the format L999 where L is any uppercase letter
 and 9 is a digit.
 Score INTEGER The score of the player.
 Ptr INTEGER The pointer to the next node.
\end_layout

\begin_layout Standard
The LinkedList class has the following properties: Identifier Data Type
 Description
\end_layout

\begin_layout Standard
Node ARRAY[1..20] OF ListNode 1-D array stores the nodes that make the ordered
 linked list.
 The unused nodes are linked together into a free list.
\end_layout

\begin_layout Standard
HeadPtr INTEGR Pointer to the first node in the ordered list.
\end_layout

\begin_layout Standard
FreePtr INTEGER Pointer to the first node in the free list.
\end_layout

\begin_layout Standard
The following diagram shows an example of a linked list object.
 This example list consists of three nodes, linked in descending order of
 the game scores.
 The unused nodes are linked to form a free list.
\end_layout

\begin_layout Standard
HeadPtr 2 3 1 2 C731 30 3 A145 28 1 C412 13 0 ID Score Ptr 
\end_layout

\begin_layout Standard
FreePtr 4 5 20 4 5 6 .
 .
 .
 .
 .
 0 
\end_layout

\begin_layout Standard
Task 4.1 Write program code for the classes ListNode and Linkedlist to declare
 all the required variables and create the initial empty linked list which
 contains all 20 nodes.
\end_layout

\begin_layout Standard
Add statement(s) to initialise the empty ordered linked list.
\end_layout

\begin_layout Standard
Evidence 13 Your program code for Task 4.1.
 [6]
\end_layout

\begin_layout Standard
Task 4.2 Write code to implement a method AddInOrder that will add a new
 node with player’s ID and score into the ordered linked list in descending
 order of the scores.
 Node added to the ordered linked list should be taken from the free list.
 
\end_layout

\begin_layout Standard
Assume that all players have different scores.
\end_layout

\begin_layout Standard
Evidence 14 Your program code for Task 4.2.
 [7]
\end_layout

\begin_layout Standard
Task 4.3 Write a procedure OutputData which displays the value of HeadPtr,
 the value of FreePtr and the contents of Node array in index order.
\end_layout

\begin_layout Standard
Evidence 15 Your program code for Task 4.3.
 [3]
\end_layout

\begin_layout Standard
The files SCORES1.txt and SCORES2.txt contain the game data.
 Each entry has the following format: <Player ID>,<Score> Task 4.4 Write
 a main program to:
\end_layout

\begin_layout Standard
• Create a linked list object • Read all player data from SCORES1.txt and
 add them to the linked list by calling procedure AddInOrder.
 • Your program will then call procedure OutputData.
\end_layout

\begin_layout Standard
Evidence 16 Screenshot showing the output from running the program in Task
 4.4 using SCORES1.txt file.
 [2] 
\end_layout

\begin_layout Standard
Task 4.5 Amend your AddInOrder program code in Task 4.2 so that if two or
 more players have the same score, they are stored in alphabetical player
 ID order.
 Use the file SCORES2.txt to test your program code.
\end_layout

\begin_layout Standard
The following diagram shows an example of an ordered linked list where players
 C412 and B321 have the same game score of 13 points.
 
\end_layout

\begin_layout Standard
HeadPtr 2 3 4 1 2 C731 30 3 A145 28 4 B321 13 1 C412 13 0 
\end_layout

\begin_layout Standard
Evidence 17 The amended program code for method AddInOrder.
 [4]
\end_layout

\begin_layout Standard
Evidence 18 Screenshot showing the output from running the program in Task
 4.4 using SCORES2.txt file.
 [2]
\end_layout

\begin_layout Standard
Task 4.6 A method DisplayByRank is to be added, which outputs all player
 IDs and their scores stored in the ordered linked list in rank order.
 If multiple players record the same score, they will have the same rank.
 
\end_layout

\begin_layout Standard
Below is a sample of screen output:
\end_layout

\begin_layout Standard
Rank Player ID Score 1 F111 45 1 G333 45 1 Z333 45 4 C333 38 5 B111 25 5
 Q333 25 7 E333 12
\end_layout

\begin_layout Standard
Write program code to:
\end_layout

\begin_layout Standard
• Implement this method • Test the program code with the data from Task
 4.5.
\end_layout

\begin_layout Standard
Evidence 19 Program code for Task 4.6.
 [7]
\end_layout

\begin_layout Standard
Evidence 20 Screenshot of the program output.
 [2]
\end_layout

\begin_layout Standard
Task 4.7 Write a recursive ReverseTraversal procedure that will traverse
 the linked list in reverse order and output players’ IDs and scores in
 ascending scores order.
\end_layout

\begin_layout Standard
Include a call to the procedure from your main program.
\end_layout

\begin_layout Standard
Test the program code with the data from Task 4.5.
\end_layout

\begin_layout Standard
Evidence 21 Your program code for Task 4.7.
 [4]
\end_layout

\begin_layout Standard
Evidence 22 Screenshot showing the program execution to test the ReverseTraversa
l method.
 [2] 
\end_layout

\end_deeper
\begin_layout Enumerate
1
\end_layout

\begin_layout Enumerate
1
\end_layout

\begin_layout Enumerate
1
\end_layout

\begin_layout Subsection
Paper 2
\end_layout

\begin_layout Section
9597 ALVL 201X TEMPLATE
\end_layout

\begin_layout Standard
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Subsubsection*
\noindent
Task X.X
\end_layout

\begin_layout Plain Layout
\begin_inset space \hfill{}
\end_inset

[10]
\end_layout

\begin_layout Subsubsection*

\series bold
Evidence X
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
thickness "0.4pt"
separation "3pt"
shadowsize "4pt"
framecolor "black"
backgroundcolor "none"
status open

\begin_layout Plain Layout

\family typewriter
FUNCTION CalCheckDigit(Number AS STRING, Total AS INTEGER) RETURNS STRING
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset

IF LENGTH(Number) > 1 THEN
\end_layout

\begin_layout Plain Layout

\family typewriter
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

Digit <- INTEGER(LBFT(Number,1))
\end_layout

\begin_layout Plain Layout
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Plain Layout

\family typewriter
// Calculate ISBN, an example of how the function is called.
\end_layout

\begin_layout Plain Layout

\family typewriter
// Second parameter is always 0.
\end_layout

\begin_layout Plain Layout

\family typewriter
ISBN = CalCheckDigit("184146208",0)
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset

 
\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
Class: Connection Node
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multicolumn="1" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Attributes
\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell multicolumn="2" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \hspace{}
\length 1col%
\end_inset


\family default
Identifier
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \hspace{}
\length 1col%
\end_inset


\family default
Data Type
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \hspace{}
\length 5col%
\end_inset


\family default
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
DataValue
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
STRING
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The node data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
LeftChild
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The left node pointer
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
RightChild
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
INTEGER
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The right node pointer
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="1">
<features tabularvalignment="middle">
<column alignment="left" valignment="top">
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
\begin_inset space \hspace{}
\length 25col%
\end_inset

ToDo
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
category : STRING
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
description : STRING
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
constructor(c : STRING, d : STRING)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
set_category(s : STRING)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
set_description(s : STRING)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
get_category() : STRING
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
get:_description() : STRING
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="left" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family typewriter
summary() : STRING
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset ERT
status open

\begin_layout Plain Layout

{}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\align center
\begin_inset Graphics
	filename static/img/9597-SPECIMENT-P2-Q6.png
	width 50page%

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
 
\end_layout

\end_body
\end_document
